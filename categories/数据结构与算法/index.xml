<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构与算法 on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 数据结构与算法 on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Fri, 10 Dec 2021 18:03:30 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法——B树和B&#43;树</title>
      <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95b%E6%A0%91%E5%92%8Cb&#43;%E6%A0%91/</link>
      <pubDate>Fri, 10 Dec 2021 18:03:30 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95b%E6%A0%91%E5%92%8Cb&#43;%E6%A0%91/</guid>
      <description>B树 平衡树算法的扩展，支持对保存在磁盘或网络上的符号表进行外部查找。
概念 又称多路平衡查找树，B树中所有结点的孩子个数的最大值称为B数的阶，通常用m表示。
具有以下特性：
  树中每个结点至多有m棵子树，即至多含有m-1个关键字
  若根结点不是终端结点，则至少有两颗子树。
  所有非叶子结点的结构：（见书上所示）
  所有叶子结点都出现在同一层次上，并且不带信息。（可视为类似于折半查找判定树的查找失败结点，实际上这些结点不存在）
  B树是所有结点的平衡因子均等于0的多路平衡查找树。
B树的高度（磁盘存取次数） 一般只讲B树的前两层放入内存中，剩余层级全部放在磁盘中，因此B树的高度就约为每次进行查找的磁盘存取次数。
首先明确B树的高度不包含最后的不带任何信息的叶结点所处的那一层。
假设$n\ge 1$，则对于任意一棵包含n个关键字，高度为h、阶数为m的B树：
 根据树中关键字个数计算高度满足的范围 若让每个结点中的关键字个数达到最少，则容纳同样多关键字的B树高度达到最大。  B树的查找 每个结点具有多路分支。
与二叉树的查找很相似，只是每个结点都是多个关键字的有序表，要在每个结点上根据该结点的子树做多路分支决定。
包含两个基本操作：
 在B树中找结点 在结点内找关键字  B树常存储在磁盘中，因此前一个查找操作是在磁盘上进行的，后一个查找操作是在内存中进行的，即在找到目标结点后，将其读入内存，然后在结点内采用顺序或折半查找方法查找。
B树的插入 将关键字插入B树的过程如下：
 定位：利用前述的B树查找算法，找出插入该关键字的最低层中的某个非叶结点。 插入：每个非失败结点的关键字个数都在区间$[\lceil m/2\rceil-1,m-1]$内，插入后的结点关键字个数小于m，则可以直接插入；插入后的结点关键字大于m-1时，必须对结点进行分裂。  分裂的方法：取一个新结点，在插入key后的原结点，从中间位置（$\lceil m/2\rceil$）将其中的关键字分为两部分，左半部分包含的关键字放入原结点中，右半部分包含的关键字放入新结点中，中间位置（$\lceil m/2\rceil$）的结点插入原结点的父结点中；如果父结点关键字个数也超过了上限，则继续进行这种分裂操作，知道这个过程传到根结点为止，进而使得B树的高度增1。
B树的删除 与插入的操作类似，即要使得删除后结点中关键字的个数$\ge \lceil m/2\rceil-1$，将会涉及结点的合并问题。
 当被删除关键字k不在终端结点：可以用k的前驱和后继替代k，然后在相应结点中删除该前驱或后继。该前驱或后继必定落在某个终端结点中，则转换成了被删关键字在终端结点中的情形。 当被删除结点在终端结点中时，有以下三种情况：  直接删除关键字。即被删除关键字所在结点的关键字个数$\ge \lceil m/2\rceil$，表明删除后仍满足B树定义。 兄弟够接。被删除前所在结点关键字个数$= \lceil m/2\rceil-1$，且与此结点相邻的兄弟结点的关键字个数$\ge \lceil m/2\rceil$，需要通过父子换位法进行调整，达到新的平衡。 兄弟不够借。被删除前所在结点关键字个数$= \lceil m/2\rceil-1$，且与此结点相邻的兄弟结点的关键字个数$= \lceil m/2\rceil -1$，则要将关键字删除后与左右兄弟结点及双亲结点中的关键字进行合并。合并过程中双亲结点中关键字会-1，若其双亲结点是根结点且关键字个数减少为0，则直接将根结点删除，合并后的新结点成为根结点。    详细例子见书上。</description>
    </item>
    
    <item>
      <title>算法——桶排序&amp;计数排序&amp;基数排序</title>
      <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E6%A1%B6%E6%8E%92%E5%BA%8F_%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F_%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 09 Dec 2021 10:55:47 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E6%A1%B6%E6%8E%92%E5%BA%8F_%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F_%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
      <description>桶排序（Bucket Sort）  将待排元素划分到不同的桶中。先扫描一遍序列，找出最大值max和最小值min，设桶的个数为k，则把区间[min, max]划分为k个区间，每个区间就是一个桶。将序列中的元素分配到各自的桶。 对每个桶内的元素进行排序。一般使用快速排序。 将各桶中的元素合并为一个大的有序序列。  当k接近于n时，桶排序的时间复杂度为O(n)，即桶越多，时间效率就越高。
计数排序（Counting Sort） 新建一个大小为maxValue-minValue+1的数组nums，然后：
 分配。扫描一遍原始数组，以扫描到的当前值val减去1作为下标，将下标对应位置数组加1，即nums[val]++ 收集。顺序扫描一遍数组nums。数组的每个元素代表了按当前下标+1对应值的个数，将这些值收集起来放入新的数组就得到最终排序结果。  例如：nums=[2,1,3,1,5]，首先扫描一遍取最大值maxValue=5和最小值minValue=1，新建一个长度为5-1+1=5的数组nums：
 分配：得到nums=[2,1,1,0,1]，例如nums[0]表示值为0+minValue=1出现了两次。 收集：得到结果，[1,1,2,3,5]  本质上是一种特殊的桶排序。当桶的个数等于元素个数时就是计数排序。
基数排序 基于关键字各位的大小进行排序。是一种借助多关键字排序的思想对单逻辑关键字进行排序的方法。
共有最高位优先MSD和最低位优先LSD两种。
 将所有待排序整数（注意，必须是非负整数）统一为位数相同的整数，位数较少的前面补零。一般用10进制，也可以用16进制甚至2进制。所以前提是能够找到最大值，得到最长的位数，设k进制下最长为位数为d。 从最低位开始，依次进行一次稳定排序。这样从最低位一直到最高位排序完成以后，整个序列就变成了一个有序序列。  基数排序可以看作是多轮桶排序，每个数位上都进行一次桶排序。
当使用2进制时， k=2 最小，位数 d 最大，时间复杂度 O(nd) 会变大，空间复杂度 O(n+k) 会变小。当用最大值作为基数时， k=maxV 最大， d=1 最小，此时时间复杂度 O(nd) 变小，但是空间复杂度 O(n+k) 会急剧增大，此时基数排序退化成了计数排序。</description>
    </item>
    
    <item>
      <title>算法——基础排序算法的实现</title>
      <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 06 Dec 2021 20:37:41 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>选择排序 void selectSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int n = nums.size(); for (int i = 0; i &amp;lt; n; i++) { int min = i; for (int j = i+1; j &amp;lt; N; j++) if (a[j] &amp;lt; a[min]) min = j; swap(nums[i], nums[min]); } } 插入排序 void insertSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int n = nums.size(); for (int i = 0; i &amp;lt; n; i++) { for (int j = i; j &amp;gt; 0 &amp;amp;&amp;amp; nums[j] &amp;lt; nums[j-1]; j--) swap(nums[j], nums[j-1]); } } 时间复杂度为$O(n^2)$，算法稳定。</description>
    </item>
    
    <item>
      <title>算法——堆排序和优先队列</title>
      <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E5%A0%86%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 06 Dec 2021 14:26:53 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E5%A0%86%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</guid>
      <description>优先队列 优先队列如同其字面意思，是一种支持删除最大元素和插入元素的一种数据结构。
二叉堆是一棵有序的完全二叉树，可以很好地实现优先队列。使用二叉堆实现优先队列可以保证插入元素和删除最大元素的操作在$\log N$的时间内完成。
我们通常使用数组来实现二叉堆。
堆 堆的有序化 sink——自上而下的有序化
void sink(vector&amp;lt;int&amp;gt;&amp;amp; nums, int i, int heapSize) {	//i为数组下标  while (2i &amp;lt; heapSize) { int j = 2i; if (j &amp;lt; heapSize - 1 &amp;amp;&amp;amp; nums[j] &amp;lt; nums[j+1])	j++; if (!(nums[i] &amp;lt; nums[j]))	break; swap(nums[i], nums[j]); i = j; } } swim——自下而上的有序化
void swim(vector&amp;lt;int&amp;gt;&amp;amp; nums, int x) {//x为插入末尾的元素  nums.push_back(x); int k = nums.size() - 1; while (k &amp;gt; 0 &amp;amp;&amp;amp; nums[k/2] &amp;lt; nums[k]) { swap(nums[k/2], nums[k]); k = k/2; } } 构建大根堆 void buildMaxHeap(vector&amp;lt;int&amp;gt;&amp;amp; nums) {	//使用sink从上向下构建大根堆  int heapSize = nums.</description>
    </item>
    
    <item>
      <title>基础算法总结</title>
      <link>https://eternityqjl.top/posts/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 30 Nov 2021 22:16:50 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>希望未来一段时间能够手动实现一下这些算法。
线性表 顺序表 链表 栈和队列 栈的顺序、链式存储
队列的顺序、链式存储
双端队列
优先队列（堆排序）
字符串 KMP模式匹配
树与二叉树 二叉树的遍历 前序、中序、后序
二叉排序树 平衡二叉树 哈夫曼树 2-3树和红黑树 图 图的遍历 广度优先搜索和深度优先搜索
最小生成树 Prim、Kruskal
最短路径 Dijkstra、Floyd
拓扑排序 活动的先后顺序
关键路径 查找 顺序查找 折半查找 B树 散列表 排序 插入排序 希尔排序 冒泡排序 快速排序 选择排序 堆排序（优先队列） 删除最大元素、插入元素
构造大根堆、小根堆
归并排序 基数排序 </description>
    </item>
    
    <item>
      <title>算法——红黑树</title>
      <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
      <pubDate>Sat, 27 Nov 2021 21:03:17 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E7%BA%A2%E9%BB%91%E6%A0%91/</guid>
      <description>本节是为了介绍一种二分查找树，无论如何构造，它的运行时间都是对数级别的。在一棵含有N个结点的树中，树的高为$\lg N$。
2-3查找树 允许一个结点保存多个键。一颗2-3查找树由2-结点和3-结点组成。
 2-结点：含有一个键（及其对应键值）和两条链接 3-结点：含有两个键（及其对应键值）和三条链接  同样地，将指向一颗空树的链接称为空链接。
查找 与二叉查找树基本相同，只是可能多了中间结点，从上向下一次递归查找。
插入新键  向2-结点插入新键 向一棵只含有3-结点的树中插入新键 向一个父结点为2-结点的3-结点中插入新键 向一个父结点为3-结点的3-结点中插入新键  全局性质 任意空链接到根结点的路径长度都是相等的。
一棵含有N个结点的2-3树高度在$\lfloor \log_3N\rfloor$（树中全是3-结点）和$\lfloor \lg N\rfloor$（树中全是2-结点）之间。
红黑二叉查找树 用标准二叉查找树和一些额外的信息来表示2-3树。将树中的链接分为两种类型：
 红链接：将两个2-结点连接起来构成一个3-结点 黑链接：2-3树中的普通链接  相当于将3-结点表示为一条左斜的红色链接。这种方法的优点是我们无需修改就可以直接使用标准二叉查找树的get()方法。对于任意的2-3树，只需对结点进行转换，就可以立即派生出一棵对应的二叉查找树。
一种等价的定义：
红黑树的另一种定义是含有红黑链接并满足下列条件的二叉查找树：
 红链接均为左链接 没有任何一个结点同时和两条红链接相连 该树是完美黑色平衡的，即任意空链接到根结点路径上的黑链接数量相同  插入操作的方法：
左旋转、右旋转、颜色转换
红黑树的实现 红黑树的插入算法：
private static final boolean RED = true; private static final boolean BLACK = false; private class Node { Key key; Value val; Node left, right; int N; boolean color; Node(Key key, Value val, int N, boolean color) { this.</description>
    </item>
    
    <item>
      <title>《算法（第4版）》学习笔记——（一）排序</title>
      <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E7%AC%AC4%E7%89%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 23 Jul 2020 14:59:12 +0000</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E7%AC%AC4%E7%89%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%E6%8E%92%E5%BA%8F/</guid>
      <description>初级排序算法 选择排序 算法描述 首先找到数组中最小的一个元素，将其与数组的第一个元素进行交换；再在剩余的元素找到最小的一个元素，将其与数组的第二个元素进行交换。如此循环往复，直到将整个数字排序。
代码实现 public class Selection { public static void sort(Comparable[] a) { //将a按照升序排列  int N = a.length; for (int i = 0; i &amp;lt; N; i++) { int min = i; for (int j = i + 1; j &amp;lt; N; j++) { if (less(a[j], a[min])) min = j; } exch(a, i ,min); } } } 性能分析  对长度为$N$的数组，选择排序大概需要$N^2/2$次比较和$N$次交换。 该算法运行时间与输入无关，数据的移动是最少的。  插入排序 算法描述 插入排序当前索引左边的所有元素都是有序的，但他们的最终位置还不确定，为了给更小的元素腾出空间，他们可能会被向右移动，当索引到达数组的最右端时，排序就完成了。
代码实现 public class Insertion { public static void sort(Comparable[] a) { int N = a.</description>
    </item>
    
    <item>
      <title>Dijkstra双栈——算术表达式求值</title>
      <link>https://eternityqjl.top/posts/dijkstra%E5%8F%8C%E6%A0%88%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</link>
      <pubDate>Tue, 21 Jul 2020 20:15:08 +0000</pubDate>
      
      <guid>https://eternityqjl.top/posts/dijkstra%E5%8F%8C%E6%A0%88%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</guid>
      <description>算数表达式 这里的算术表达式支持常见的二元运算符+-*/以及接受一个参数的平方根运算符sqrt。这里我们假定表达式中未省略所有的括号。
计算方法  将操作数压入操作数栈 将运算符压入运算符栈 忽略左括号 遇到右括号时，弹出一个运算符，弹出需要数量的操作数进行运算，然后将得到的结果再压入操作数栈。  代码实现 package edu.princeton.cs.algs4; public class Evaluate { public static void main(String[] args) { Stack&amp;lt;String&amp;gt; ops = new Stack&amp;lt;String&amp;gt;(); Stack&amp;lt;Double&amp;gt; vals = new Stack&amp;lt;Double&amp;gt;(); while (!StdIn.isEmpty()) { //读取字符，如果是运算符则压入运算符栈ops 	String s = StdIn.readString(); if (s.equals(&amp;#34;(&amp;#34;)); else if (s.equals(&amp;#34;+&amp;#34;)) ops.push(s); else if (s.equals(&amp;#34;-&amp;#34;)) ops.push(s); else if (s.equals(&amp;#34;*&amp;#34;)) ops.push(s); else if (s.equals(&amp;#34;/&amp;#34;)) ops.push(s); else if (s.equals(&amp;#34;sqrt&amp;#34;)) ops.push(s); //如果字符为)，则弹出运算符和操作数，计算结果并压入操作数栈vals 	else if (s.equals(&amp;#34;)&amp;#34;)) { String op = ops.</description>
    </item>
    
    <item>
      <title>抽象数据类型</title>
      <link>https://eternityqjl.top/posts/%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 24 Sep 2019 21:33:07 +0000</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>一、抽象数据类型的实现 //数据类型的实现 public class Counter { //实例变量  private final String name; private int count; //构造函数  public void Counter(String id) { name = id; } //实例方法  public void increment() { count++; } public int tally() { return count; } public String toString() { return count + &amp;#34; &amp;#34; + name; } } //测试该数据类型的用例 public static void main(String[] args) { //创建并初始化对象  Counter heads = new Counter(&amp;#34;heads&amp;#34;); Counter tails = new Counter(&amp;#34;tails&amp;#34;); //调用实例方法  heads.</description>
    </item>
    
    <item>
      <title>什么是数据结构？什么又是算法？</title>
      <link>https://eternityqjl.top/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%80%E4%B9%88%E5%8F%88%E6%98%AF%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 19 Sep 2019 13:55:19 +0000</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%80%E4%B9%88%E5%8F%88%E6%98%AF%E7%AE%97%E6%B3%95/</guid>
      <description>数据结构及相关概念 0. 要想知道什么是数据结构，首先要了解与“数据”相关的概念，这样才能一步步理解什么是数据结构。
我们首先用放书这件事情来举例。
 如果正常情况下只有你自己一个人的书，那么你把他们一本一本立起来放在书架上就可以了。 那么如果有一个图书馆那么多的书应该怎样办么？总不能把他们乱起八糟的立起来放吧？那么是不是应该先按照社会科学、理科类、工科类、外语类等等的分类方式先分类，然后按照具体所属的类别把他们一个个放进去？其实数据结构的相关的概念就是一个这样简单的道理。  下面我们来进行具体的描述。
1. 数据
 是对客观事物的符号表示，在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。 其实就对应了图书馆中的所有书。  2. 数据元素
 是数据的基本单位，在计算机程序中通常作为一个整体进行考虑号处理。 对应的就是某一本具体的书，比如”数据结构与算法“这本书。  3. 数据项
 一个数据元素可由若干个数据项组成，数据项是数据的不可分割的最小单位。 数据项不就是对应了书中的具体信息，比如书的作者、章节内容、ISBN编号等等。  4. 数据对象
 是性质相同的数据元素的集合，是数据的子集。 数据元素是一本具体的书，那么性质相同数据元素的集合不就代表了一类具体的书籍吗，就比如计算机类的书籍，其中包含了”数据机构与算法这本书“。   看到这儿是不是对这几者的关系还有点儿晕？没关系，我们用思维导图来再次说明。
数据是由每一个具体的数据元素组成的，相同的数据元素同属于一个数据对象，每个数据元素中又有具体的信息——数据项。
 接下来让我们再次把这些概念对应到具体的例子”书”中。
世界上所有书就是一个数据，每一本具体的书例如“数据结构与算法”就是一个数据元素，每本书中的具体信息例如“书名、作者、ISBN码&amp;hellip;”就是多个数据项，一些相同类型的书的类型例如“计算机类书籍”就是一个数据对象。
现在你应该清楚以上4个概念了吧？
那我们回到最初的问题，什么是数据结构？
这里我们同样举例子来说明。
首先，一个类别的书籍中有许多具体的书，如&amp;quot;C语言&amp;quot;、&amp;ldquo;数据结构与算法&amp;rdquo;、&amp;ldquo;编译原理&amp;rdquo;，而这些书之间又有一些关联，比如*某个算法可以用C语言来实现*，编译过程中需要用到特定的算法等等，这些存在关联的书即&amp;quot;数据元素&amp;quot;的集合就叫做数据结构。
4. 数据结构
  相互之间存在一种或多种特定关系的数据元素的集合。
  大多数算法都需要我们适当地组织数据，而为了组织数据就产生了数据结构。
  结构
 逻辑结构
 集合
线性结构
树形结构
网状结构或图状结构
 物理结构(储存结构)
 顺序储存结构
链式储存结构
    (注：这里不具体展开介绍各个数据结构，在后面的附录里进行介绍)</description>
    </item>
    
  </channel>
</rss>
