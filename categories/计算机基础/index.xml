<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机基础 on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 计算机基础 on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Wed, 22 Dec 2021 15:49:36 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试机器大小端的方法</title>
      <link>https://eternityqjl.top/posts/%E6%B5%8B%E8%AF%95%E6%9C%BA%E5%99%A8%E5%A4%A7%E5%B0%8F%E7%AB%AF%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 22 Dec 2021 15:49:36 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E6%B5%8B%E8%AF%95%E6%9C%BA%E5%99%A8%E5%A4%A7%E5%B0%8F%E7%AB%AF%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>小端法：低位字节存放在低地址，高位字节存放在高地址 大端法：低位字节存放在高地址，高位字节存放在低地址  判断电脑大小端模式的方法：
方法一  C语言中的char和int：
在C语言中并没有char类型的常量，其实是用int类型表示char。举个例子：
char ch = &amp;#39;a&amp;#39;; //分别输出ch的字符和对应的ascii码。即打印出的是字符或整数 printf(&amp;#34;%c, %d&amp;#34;, ch, ch); 输出结果为：a, 97
 将int 48存起来，然后取得其地址，再将这个地址转为char* 这时候，如果是小端存储，那么char*指针就指向48；48对应的ASCII码为字符‘0’；
void judge1() { int i = 48; int* p = &amp;amp;i; char c = 0; c = *((char*)p); if (c == &amp;#39;0&amp;#39;) cout &amp;lt;&amp;lt; &amp;#34;小端&amp;#34; &amp;lt;&amp;lt; endl; else cout &amp;lt;&amp;lt; &amp;#34;大端&amp;#34; &amp;lt;&amp;lt; endl; } 方法二 定义变量int i=1；将 i 的地址拿到，强转成char*型，这时候就取到了 i 的低地址，这时候如果是1就是小端存储，如果是0就是大端存储。
void judge2() { int i = 1; char c = (*(char*)&amp;amp;i); if (c) cout &amp;lt;&amp;lt; &amp;#34;小端&amp;#34; &amp;lt;&amp;lt; endl; else cout &amp;lt;&amp;lt; &amp;#34;大端&amp;#34; &amp;lt;&amp;lt; endl; } 方法三  联合体union是一种特殊数据类型，允许在相同的内存位置存储不同的数据类型。可以定义一个带有多成员的共同体，但任何时候只能有一个成员带有值。</description>
    </item>
    
    <item>
      <title>Linux基础知识</title>
      <link>https://eternityqjl.top/posts/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 29 Jul 2021 08:44:21 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>系统启动过程  内核的引导：BIOS开机自检，然后读入/boot目录的内核文件 运行init：init进程是所有进程的起点，运行级别确定 系统初始化：rc.sysinit 建立终端 用户登录系统  系统目录结构  /bin：bin是二进制文件的缩写，存放着最常用的命令 /boot：存放启动时的核心文件 /dev：dev是Device的缩写，存放Linux的外部设备 /etc：Etcetera的缩写，用来存放所有系统管理所需的配置文件和子目录 /home：主目录，Linux中，每个用户都有一个自己的目录 /lib：Library的缩写，存放着系统最基本的动态连接共享库 /media：自动识别一些设备，将其挂载到这个目录 /mnt：该目录为了让用户临时挂载别的文件系统 /opt：optional的缩写，给主机额外安装软件所设置的目录 /proc：Processes进程的缩写，是一种虚拟文件系统，存放着当前内核运行状态的一系列特殊文件。该目录不再硬盘上，而是在内存中。 /root：系统管理员主目录 /tmp：temporary的缩写，用来存放临时目录 /usr：unix shared resources共享资源的缩写，用户的很多应用程序和文件存放于此，类似于windows下的program files /usr/bin：系统用户使用的应用程序 /usr/src：内核源代码默认的存放目录 /var：variable的缩写，存放着不断扩充着的东西，将经常被修改的目录放在这个目录下，包括各种日志文件  文件基本属性 Linux系统是一种多用户系统，不同用户有不同权限。
通常使用以下命令来修文件和目录的权限：
 chown(change ownerp)：修改所属用户与组 chmod(change mode)：修改用户的权限  在Linux中使用ll或ls -l来显示一个文件的属性以及文件所属的用户和组。
第一个字符代表这个文件的类型，是目录、文件或连接文件等等：
  d为目录
  -为文件
  l为链接文件
  b为可存储的接口设备
  c为串行端口设备
接下来的字符以三个为一组，为rwx三个参数的组合，r代表可读，w代表可写，x代表可执行，从前到后分别代表user、group、everyone的权限，如果没有权限，则用-表示。
  对于root用户，文件权限不起作用。
chgrp：改变文件属组 用法：
chgrp [-R] 属组名 文件名 -R：recursion，递归，改变目录下所有文件的属性
chown：更改文件属主，也可以同时更改文件属组 用法：</description>
    </item>
    
    <item>
      <title>字符编码：Unicode, UTF-8</title>
      <link>https://eternityqjl.top/posts/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81unicode-utf-8/</link>
      <pubDate>Wed, 02 Jun 2021 15:29:29 +0000</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81unicode-utf-8/</guid>
      <description>&lt;h2 id=&#34;基本&#34;&gt;基本&lt;/h2&gt;
&lt;p&gt;计算机中储存的信息都是用二进制数表示的；而我们在屏幕上看到的英文、汉字等字符是二进制数转换之后的结果。通俗的说，按照何种规则将字符存储在计算机中，如&amp;rsquo;a&amp;rsquo;用什么表示，称为&amp;quot;&lt;strong&gt;编码&lt;/strong&gt;&amp;quot;；反之，将存储在计算机中的二进制数解析显示出来，称为&amp;quot;&lt;strong&gt;解码&lt;/strong&gt;&amp;quot;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符集(charset)&lt;/strong&gt;：是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国文字、标点符号、图形符号、数字等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符编码(character Encoding)&lt;/strong&gt;：即在符号集合与数字系统之间建立对应关系，它是信息处理的一项基本技术。通常人们用符号集合（一般情况下就是文字）来表达信息。而以计算机为基础的信息处理系统则是利用元件（硬件）不同状态的组合来存储和处理信息的。元件不同状态的组合能代表数字系统的数字，因此字符编码就是将符号转换为计算机可以接受的数字系统的数，称为数字代码。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
