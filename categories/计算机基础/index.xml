<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机基础 on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 计算机基础 on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Thu, 06 Jan 2022 15:13:16 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>八股文——Cpp相关</title>
      <link>https://eternityqjl.top/posts/%E5%85%AB%E8%82%A1%E6%96%87cpp%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 06 Jan 2022 15:13:16 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E5%85%AB%E8%82%A1%E6%96%87cpp%E7%9B%B8%E5%85%B3/</guid>
      <description>new/delete和malloc/free的区别  malloc/free是C/C++的库函数，需要stdlib.h；new/delete是C++的关键字； 都可用于申请动态内存和释放内存，new/delete在对象创建的时候自动执行构造函数，对象消亡前自动执行析构函数，底层实现其实也是malloc/free new无需指定内存块的大小，编译器会根据类型信息自行计算；malloc需要显式地支持所需内存的大小 new返回指定类型的指针，无需进行类型转换；malloc默认返回类型为void*，必须强行转换为实际类型的指针 new内存分配失败时会抛出bad_alloc异常；malloc失败时返回NULL  malloc的底层实现 Linux下：
 开辟空间小于128K时，通过brk()函数  将数据段.data的最高地址指针**_edata向高地址移动，即增加堆**的有效区域来申请内存空间 brk分配的内存需要等到高地址内存释放以后才能释放，这也是内存碎片产生的原因   开辟空间大于128K时，通过mmap()函数  利用mmap系统调用，在堆和栈之间文件映射区域申请一块虚拟内存 128K限制可由M_MMAP_THRESHOLD选项进行修改 mmap分配的内存可以单独释放   以上只涉及虚拟内存的分配，直到进程第一次访问其地址时，才会通过缺页中断机制分配到物理页中  指针和引用的异同点；如何相互转换  引用是别名，指针是地址 指针变量在符号表上对应的地址值为指针变量的地址；而引用在符号边上的地址值为引用对象的地址；指针可以改变指向的对象，而引用不行；二者都可以改变指向对象的值。 硬件通过地址访问内存位置，因此引用可以理解为一个常量指针，只能绑定到初始化它的对象上  struct、union的异同  struct中每个变量一次存储；union中，每个变量都是从偏移地址零开始存储，同一时刻只有一个成员存储于该地址 struct内存大小遵循结构对齐原则（详见Cpp内存对齐） union内存大小为其最大成员的整数倍  extern C的作用 主要是为了能正确实现C++代码调用C语言代码。
C++支持函数重载，即不同名字空间namespace的两个函数原型声明可以完全相同，或者两个函数同名但参数列表不同；g++编译器会对此进行name mangling，生成全局唯一的符号名称，使链接器可以准确识别。
C语言不支持函数重载，即不允许同名符号，所以不需要这些工作，因此在C++代码中加入extern C，是为了链接规范。
memcpy()函数注意的问题 函数原型声明void *memcpy(void *dest, void *src, unsigned int count); 
memcpy函数用于把资源内存（src所指向的内存区域）中连续的count个字节数据拷贝到目标内存（dest所指向的内存区域）
 数据长度count的单位是字节，1byte = 8bit 数据类型为char，则数据长度就等于元素的个数；其他数据类型则要注意数据长度的值 n * sizeof(type_name)的写法  memmove()函数与memcpy()函数的功能相同，区别是前者处理空间重叠问题，后者不处理。
memset()函数 函数原型声明void *memset(void *buffer,int c,int count);</description>
    </item>
    
    <item>
      <title>Cpp内存对齐</title>
      <link>https://eternityqjl.top/posts/cpp%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Wed, 22 Dec 2021 16:10:44 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid>
      <description>内存对齐 看下面的小程序，理论上，32位系统下，int占4byte，char占一个byte，那么将它们放到一个结构体中应该占4+1=5byte；但是实际上，通过运行程序得到的结果是8 byte，这就是内存对齐所导致的。
//32位系统 #include&amp;lt;stdio.h&amp;gt;struct{ int x; char y; }s; int main() { printf(&amp;#34;%d\n&amp;#34;,sizeof(s); // 输出8  return 0; } 现代计算机中内存空间都是按照 byte 划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但是实际的计算机系统对基本类型数据在内存中存放的位置有限制，它们会要求这些数据的首地址的值是某个数k（通常它为4或8）的倍数，这就是所谓的内存对齐。
进行内存对齐的原因 尽管内存是以字节为单位，但是大部分处理器并不是按字节块来存取内存的.它一般会以双字节,四字节,8字节,16字节甚至32字节为单位来存取内存，我们将上述这些存取单位称为内存存取粒度.
现在考虑4字节存取粒度的处理器取int类型变量（32位系统），该处理器只能从地址为4的倍数的内存开始读取数据。
默认内存对齐 int类型放在地址能被4整除的位置，short类型放在地址能被2整除的位置，char能放在任何位置。
结构体的对齐满足以下原则：
 结构体变量的首地址能够被其最宽基本类型成员的大小所整除。 结构体每个成员相对于结构体首地址的偏移量都是成员大小的整数倍，如有需要编译器会在成员之间填充字节。 结构体的总大小为结构体最宽基本类型成员大小的整数倍，如有需要编译器会在最末一个成员后填充字节。  #pragma pack()命令 改命令强制规定了成员的对齐方式，括号内为对齐的字节数。若括号内的内容为空，则为默认对齐。
改变默认对齐方式能够更加充分利用存储空间，但降低了计算机的读写速率，是一种以空间换事件的方法。</description>
    </item>
    
    <item>
      <title>测试机器大小端的方法</title>
      <link>https://eternityqjl.top/posts/%E6%B5%8B%E8%AF%95%E6%9C%BA%E5%99%A8%E5%A4%A7%E5%B0%8F%E7%AB%AF%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 22 Dec 2021 15:49:36 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E6%B5%8B%E8%AF%95%E6%9C%BA%E5%99%A8%E5%A4%A7%E5%B0%8F%E7%AB%AF%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>小端法：低位字节存放在低地址，高位字节存放在高地址 大端法：低位字节存放在高地址，高位字节存放在低地址  判断电脑大小端模式的方法：
方法一  C语言中的char和int：
在C语言中并没有char类型的常量，其实是用int类型表示char。举个例子：
char ch = &amp;#39;a&amp;#39;; //分别输出ch的字符和对应的ascii码。即打印出的是字符或整数 printf(&amp;#34;%c, %d&amp;#34;, ch, ch); 输出结果为：a, 97
 将int 48存起来，然后取得其地址，再将这个地址转为char* 这时候，如果是小端存储，那么char*指针就指向48；48对应的ASCII码为字符‘0’；
void judge1() { int i = 48; int* p = &amp;amp;i; char c = 0; c = *((char*)p); if (c == &amp;#39;0&amp;#39;) cout &amp;lt;&amp;lt; &amp;#34;小端&amp;#34; &amp;lt;&amp;lt; endl; else cout &amp;lt;&amp;lt; &amp;#34;大端&amp;#34; &amp;lt;&amp;lt; endl; } 方法二 定义变量int i=1；将 i 的地址拿到，强转成char*型，这时候就取到了 i 的低地址，这时候如果是1就是小端存储，如果是0就是大端存储。
void judge2() { int i = 1; char c = (*(char*)&amp;amp;i); if (c) cout &amp;lt;&amp;lt; &amp;#34;小端&amp;#34; &amp;lt;&amp;lt; endl; else cout &amp;lt;&amp;lt; &amp;#34;大端&amp;#34; &amp;lt;&amp;lt; endl; } 方法三  联合体union是一种特殊数据类型，允许在相同的内存位置存储不同的数据类型。可以定义一个带有多成员的共同体，但任何时候只能有一个成员带有值。</description>
    </item>
    
    <item>
      <title>Linux基础知识</title>
      <link>https://eternityqjl.top/posts/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 29 Jul 2021 08:44:21 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>系统启动过程  内核的引导：BIOS开机自检，然后读入/boot目录的内核文件 运行init：init进程是所有进程的起点，运行级别确定 系统初始化：rc.sysinit 建立终端 用户登录系统  系统目录结构  /bin：bin是二进制文件的缩写，存放着最常用的命令 /boot：存放启动时的核心文件 /dev：dev是Device的缩写，存放Linux的外部设备 /etc：Etcetera的缩写，用来存放所有系统管理所需的配置文件和子目录 /home：主目录，Linux中，每个用户都有一个自己的目录 /lib：Library的缩写，存放着系统最基本的动态连接共享库 /media：自动识别一些设备，将其挂载到这个目录 /mnt：该目录为了让用户临时挂载别的文件系统 /opt：optional的缩写，给主机额外安装软件所设置的目录 /proc：Processes进程的缩写，是一种虚拟文件系统，存放着当前内核运行状态的一系列特殊文件。该目录不再硬盘上，而是在内存中。 /root：系统管理员主目录 /tmp：temporary的缩写，用来存放临时目录 /usr：unix shared resources共享资源的缩写，用户的很多应用程序和文件存放于此，类似于windows下的program files /usr/bin：系统用户使用的应用程序 /usr/src：内核源代码默认的存放目录 /var：variable的缩写，存放着不断扩充着的东西，将经常被修改的目录放在这个目录下，包括各种日志文件  文件基本属性 Linux系统是一种多用户系统，不同用户有不同权限。
通常使用以下命令来修文件和目录的权限：
 chown(change ownerp)：修改所属用户与组 chmod(change mode)：修改用户的权限  在Linux中使用ll或ls -l来显示一个文件的属性以及文件所属的用户和组。
第一个字符代表这个文件的类型，是目录、文件或连接文件等等：
  d为目录
  -为文件
  l为链接文件
  b为可存储的接口设备
  c为串行端口设备
接下来的字符以三个为一组，为rwx三个参数的组合，r代表可读，w代表可写，x代表可执行，从前到后分别代表user、group、everyone的权限，如果没有权限，则用-表示。
  对于root用户，文件权限不起作用。
chgrp：改变文件属组 用法：
chgrp [-R] 属组名 文件名 -R：recursion，递归，改变目录下所有文件的属性
chown：更改文件属主，也可以同时更改文件属组 用法：</description>
    </item>
    
    <item>
      <title>字符编码：Unicode, UTF-8</title>
      <link>https://eternityqjl.top/posts/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81unicode-utf-8/</link>
      <pubDate>Wed, 02 Jun 2021 15:29:29 +0000</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81unicode-utf-8/</guid>
      <description>&lt;h2 id=&#34;基本&#34;&gt;基本&lt;/h2&gt;
&lt;p&gt;计算机中储存的信息都是用二进制数表示的；而我们在屏幕上看到的英文、汉字等字符是二进制数转换之后的结果。通俗的说，按照何种规则将字符存储在计算机中，如&amp;rsquo;a&amp;rsquo;用什么表示，称为&amp;quot;&lt;strong&gt;编码&lt;/strong&gt;&amp;quot;；反之，将存储在计算机中的二进制数解析显示出来，称为&amp;quot;&lt;strong&gt;解码&lt;/strong&gt;&amp;quot;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符集(charset)&lt;/strong&gt;：是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国文字、标点符号、图形符号、数字等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符编码(character Encoding)&lt;/strong&gt;：即在符号集合与数字系统之间建立对应关系，它是信息处理的一项基本技术。通常人们用符号集合（一般情况下就是文字）来表达信息。而以计算机为基础的信息处理系统则是利用元件（硬件）不同状态的组合来存储和处理信息的。元件不同状态的组合能代表数字系统的数字，因此字符编码就是将符号转换为计算机可以接受的数字系统的数，称为数字代码。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
