<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机操作系统 on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 计算机操作系统 on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Tue, 07 Dec 2021 17:14:52 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>现代操作系统学习日志——进程与线程</title>
      <link>https://eternityqjl.top/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Tue, 07 Dec 2021 17:14:52 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
      <description>0. 操作系统概念 进程 地址空间 文件 输入输出 保护 shell 进程是操作系统中的最核心的概念，它是对正在运行程序的一个抽象。
进程 在任何多道程序设计系统中，CPU由一个进程快速切换至另一个进程，使得每个进程各运行几十至几百毫秒。在某一瞬间，CPU只运行一个进程，但在1秒内CPU可能运行多个进程。
进程模型 计算机上所有可运行的软件，通常也包括操作系统，被组织成若干顺序进程。一个进程就是一个正在执行程序的实例。
进程的创建 进程的终止 进程的层次结构 UNIX中进程和它的所有子进程及后裔共同组成一个进程组。
UNIX启动时初始化自己的方式：一个称为init的特殊进程出现在启动映像中，开始运行时读入一个说明终端数量的文件，接着为每个终端创建一个新进程，这些进程等待用户登陆，如果有一个用户登录成功，该登录进程就执行一个shell准备接受命令，所接受的这些命令会启动更多进程。以此类推，在整个系统中，所有进程都是属于以init为根的一棵树。
Windows中没有进程层次的概念，所有进程都是低位相等的。
进程的状态  运行态：该时刻进程实际占用CPU 就绪态：可运行，但因为其他进程正在运行而暂时停止 阻塞态：除非某种外部事件发生，否则进程不能运行  进程的实现 线程 每个进程有一个地址空间和一个控制线程；但是，经常存在同一个地址空间中准并行运行多个控制线程的情况，这些线程就像是分离的进程（除共享地址空间外）。
线程的使用 并行实体拥有共享同一个地址空间和所有可用数据的能力，而多进程模型的地址空间不同。
线程比进程更轻量级，更容易创建、也更容易撤销。
另外如果存在大量计算和I/O处理，多个线程允许这些活动彼此重叠进行，加快执行速度。
举例
 字处理软件：  与用户交互线程 格式处理线程 处理磁盘备份线程    经典的线程模型 在同一个进程中并行运行多个线程，是对在同一台计算机上并行运行多个进程的模拟。前一种情形下，多个线程共享共享同一地址空间和其他资源，后一种情形中，多个进程共享物理内存、磁盘、打印机和其他资源。因此由于线程具有进程的某些性质，所以有时被称为轻量级进程。
多线程用来描述在同一个进程中允许多个线程的情形，一些CPU已经有直接硬件支持多线程，允许线程切换在纳秒级完成。
所有线程共享同一地址空间，意味着它们也共享同样的全局变量。各个线程可以访问进程地址空间中的每一个内存地址，所以一个线程可以读、写或清除另一个线程的堆栈。线程之间是没有保护的，因为同一个进程的多个线程是为了相互合作的。除了共享地址空间，所有线程还共享同一个打开文件、子进程、定时器及相关信号。
每个进程中的内容：
 地址空间 全局变量 打开文件 子进程 定时器 信号与信号处理程序 账户信息  每个线程中的内容：
 程序计数器 寄存器 堆栈 状态  和传统进程一样，线程可以处于若干种状态的任何一个：运行、阻塞、就绪或终止。正在运行的线程拥有CPU并且是活跃的，被阻塞线程正在等待某个释放它的事件。
认识到每个线程有其自己的堆栈很重要。每个线程的堆栈有一个帧，供各个被调用但还没有从中返回的过程使用。在该栈帧中存放了响应过程的局部变量以及过程调用完后使用的返回地址。通常每个线程会调用不同的过程，从而有一个各自不同的执行历史，因此每个线程需要有自己的堆栈。
一个常见的系统调用：thread_yield，允许线程自动放弃CPU而让另一个线程运行。这样的调用很重要，因为不同于进程，线程库无法利用时钟中断强制线程让出CPU。所以设法使线程随着事件推移自动交出CPU，并让其他线程有机会使用，就非常重要。
POSIX线程 为实现可移植的线程程序，IEEE定义了线程的标准。它定义的线程包叫做pthread。大部分UNIX系统都支持该标准，这个标准定义了超过60个函数调用。所有pthread线程都有某些特性，每一个都含有一个标识符、一组寄存器和一个存储在结构中的属性。这些属性包括堆栈大小、调度参数以及其他线程需要的项目。
以下是一些线程调用举例：
 pthread_create：创建新线程并返回标识符，线程标识符为了让其他线程引用该线程 pthread_exit：结束调用的线程 pthread_join：等待一个特定线程的推出 pthread_yield：释放CPU来运行另一个线程 pthread_attr_init：创建并初始化一个线程的属性结构 pthread_attr_destroy：删除一个线程的属性结构  在用户空间中实现线程 有两种主要的方法实现线程包：在用户空间中和在内核中。</description>
    </item>
    
    <item>
      <title>现代操作系统学习日志——文件系统</title>
      <link>https://eternityqjl.top/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 13 Nov 2021 19:54:09 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description>所有计算机应用程序都需要存储和检索信息。
进程运行时可以在自己的地址空间中存储一定量的信息，但存储容量易受到虚拟地址空间大小的限制。另外，进程终止时，它保存的信息也随之丢失，但对于很多应用（例如数据库）而言，有关信息必须能够保存很长时间甚至永久保留。第三个问题是经常需要多个进程同时访问同一信息，解决方法是使得信息本身独立于任何一个进程。
所以，长期存储信息有以下基本要求：
 能够存储大量信息 使用信息的进程终止时，信息仍旧存在 必须能使多个进程并发访问有关信息  磁盘能够进行长期存储，我们将其当作一种大小固定的块的线性序列，并且支持读块k和写块k的操作。
文件是进程创建的信息逻辑单元，一块磁盘中可以有很多文件，每个文件是独立于其他文件的，文件是对磁盘的建模，而不是对RAM的建模。
进程可以读取已经存在的文件，并在需要时建立新的文件。存储在文件中的信息必须是持久的。
文件 文件命名 大小写
有些区分、有些不区分。
扩展名
UNIX中扩展名只是一张约定，操作系统不强迫采用，是用来提醒文件所有者的。
而对于可以处理多种类型文件的程序，这类约定特别有用。例如C编译器可以编译、链接多种文件，这是扩展名就很必要。
另外，Windows关注扩展名并且对其赋予了含义，用户或进程可以在操作系统中注册扩展名，并规定哪个程序拥有该扩展名。
文件结构  无结构的字节序列（Windows和Unix采用这种方法） 具有固定长度记录的序列 由一棵树构成的文件结构，每个记录不必具有相同长度，记录的固定位置上有一个键字段（在一些处理商业数据的大型计算机上广泛应用）  文件类型  普通文件  ASCII文件。优势是可以显示和打印，可以用任何文本编辑器进行编辑 二进制文件。有一定的内部结构，使用该文件的程序才了解这种结构，只有文件格式正确，操作系统才会执行。详细例子见书上。   目录：管理文件系统结构的系统文件  另外，Unix还具有：
 字符特殊文件。与I/O有关，用于串行I/O设备。 块特殊文件。用于磁盘设备。  两个普通文件的例子：一个可执行文件、一个存档文件。详情见书上。
文件访问  顺序访问 随机访问文件  read操作给出开始读文件的位置 用seek操作设置当前位置（Windows和UNIX使用这种方式）    文件属性 除了文件名和数据外的与文件相关的信息，称为文件属性或元数据。这些信息在不同系统中有着很大差异。主要具有以下属性类别：
 与文件保护相关的属性。创建者、所有者、口令等。 标志。用于控制或启动某些特殊属性。 用关键字查找记录的文件中的属性：记录长度、键的位置和长度等。 创建时间相关属性。 当前大小。  文件操作 与文件有关的最常用的一些系统调用：
 create delete open close read write append。write的限制格式，只能从文件末尾添加数据。 seek get attributes set attributes rename  一个文件系统调用实现复制的简单程序 详情见书上。</description>
    </item>
    
  </channel>
</rss>
