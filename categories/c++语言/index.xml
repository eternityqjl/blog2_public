<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43;语言 on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/categories/c&#43;&#43;%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in C&#43;&#43;语言 on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Tue, 28 Dec 2021 21:53:28 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/categories/c++%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cpp指向类成员的指针</title>
      <link>https://eternityqjl.top/posts/cpp%E6%8C%87%E5%90%91%E7%B1%BB%E6%88%90%E5%91%98%E7%9A%84%E6%8C%87%E9%92%88/</link>
      <pubDate>Tue, 28 Dec 2021 21:53:28 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E6%8C%87%E5%90%91%E7%B1%BB%E6%88%90%E5%91%98%E7%9A%84%E6%8C%87%E9%92%88/</guid>
      <description>指向类的普通成员的指针（非静态） 指向类成员函数的指针 指向类成员函数的指针不仅要匹配函数的参数类型和个数，以及返回值类型，还要匹配该函数指针所属的类类型。
原因是非静态的成员函数必须绑定到一个类的对象或者指针上，才能得到被调用对象的this指针，然后才能调用指针所指的成员函数。
  声明：与普通函数作为区分，指向类的成员函数的指针只需要在指针前加上类类型即可：
typedef 返回值 (类名::*指针类型名)(参数列表);   赋值：只需使用类的成员函数地址赋值即可：
指针类型名 指针名 = &amp;amp;类名::成员函数名;   调用：针对调用的对象是对象还是指针，分别用.*和-&amp;gt;*进行调用：
(类对象.*指针名)(参数列表); (类对象-&amp;gt;*指针名)(参数列表);   指向类数据成员的指针 同理指向类成员函数的指针，只要判断以下两点是否一致即可：
 数据成员的类型 所属的类类型  指向类的静态成员的指针 类的静态成员不依赖于具体对象，所有实例化的对象都共享同一个静态成员，即静态成员没有this指针的概念。
所以，指向类的静态成员的指针就是普通的指针。
要使用(&amp;amp;类名::成员名)获取指向成员的指针，首先这个成员必须是对外可见的，即public的。</description>
    </item>
    
    <item>
      <title>Cpp容器库和相关操作总结</title>
      <link>https://eternityqjl.top/posts/cpp%E5%AE%B9%E5%99%A8%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 16 Dec 2021 15:34:43 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%AE%B9%E5%99%A8%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</guid>
      <description>顺序容器 vector member functions：
constructor、destructor、operator=、assign、get_allocator
Element access  at operator front back data  Iterators  begin/cbegin end/cend rbegin/c rbegin rend/c rend  Capacity  empty size max_size reserve capacity shrink_to_fit  Modifiers  clear insert emplace：相较于insert，不需要产生一个临时变量。 erase push_back resize swap  non-member functions
 operator== swap erase  deque 双端队列
list 双向链表
forward_list 单向链表
array array 容器的大小是固定的，无法动态的扩展或收缩，这也就意味着，在使用该容器的过程无法借由增加或移除元素而改变其大小，它只允许访问或者替换存储的元素。
string Iterators  begin/cbegin end/cend rbegin/c rbegin rend/c rend  Capacity  empty size length max_size reserve capacity clear shrink_to_fit  Element access  at operator front back  Modifiers  += append push_back assign insert erase replace swap pop_back  关联容器 set Iterators  begin / cbegin end / cend rbegin / c rbegin rend / c rend  Capacity  empty size max_size  Modifiers  clear insert emplace emplace_hint erase swap extract merge  Lookup  count find contains equal_range lower_bound upper_bound  map Element accress  at operator   Iterators  begin / cbegin end / cend rbegin / c rbegin rend / c rend  Capacity  empty size max_size  Modifiers  clear insert insert_or_assign emplace emplace_hint try_emplace erase swap extract merge  Lookup  count find contains equal_range lower_bound upper_bound  multimap 允许多个多个元素具有相同的关键词。主要应用有：例如词典中一个单词可以有多个意思。</description>
    </item>
    
    <item>
      <title>Cpp程序的内存分配</title>
      <link>https://eternityqjl.top/posts/cpp%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Thu, 02 Dec 2021 21:54:01 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>栈stack &amp;amp; 堆heap  栈区stack：由编译器自动分配和释放，用来存放函数的参数值、局部变量的值。按内存地址由高往低方向生长，其最大大小由编译时确定，速度快，但自由性差，最大空间不大。 堆区heap：一般由程序员分配和释放，用来创建动态内存。按内存地址由低到高方向生长，其大小由系统内存/虚拟内存上限决定，速度较慢，但自由性大，可用空间大。  .data &amp;amp; .bss &amp;amp; .text  全局区.data(gvar)：程序中已经初始化的非零全局变量、静态变量，程序结束后由系统释放 .bss：存放程序中未初始化的全局变量和静态变量，以及所有被初始化为0的全局或静态变量。目标文件中这个节不占据实际空间，仅仅是一个占位符。 程序代码区.text：存放已编译程序的机器代码  text和data节都在可执行文件中，.bss不在可执行目标文件中，由系统自动生成。
宏定义不占用内存和编译时间。
new与malloc的区别 malloc是面向内存的，想要多大内存就分配多大。而new是面向对象的，根据执行的对象类型来申请空间，并能够内部调用构造函数生成对象。</description>
    </item>
    
    <item>
      <title>typedef和define宏详解</title>
      <link>https://eternityqjl.top/posts/cpp_typedef%E5%92%8Cdefine%E5%AE%8F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Dec 2021 19:43:11 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp_typedef%E5%92%8Cdefine%E5%AE%8F%E8%AF%A6%E8%A7%A3/</guid>
      <description>typedef是定义了一种类型的新别名，不同于宏，它不是简单的字符串替换。
当const和typedef一起出现时，typedef不会是简单的字符串替换就行。
typedef常用来定义一个标识符及关键字的别名，它是语言编译过程的一部分，但它并不实际分配内存空间
#define为一宏定义语句，通常用它来定义常量(包括无参量与带参量)，以及用来实现那些“表面似和善、背后一长串”的宏，它本身并不在编译过程中进行，而是在这之前(预处理过程)就已经完成了，但也因此难以发现潜在的错误及其它代码维护问题
#define用法详解 无参宏定义 #define 标识符 字符串 预处理命令。
有参宏定义 #define 宏名(形参表) 字符串 宏定义中称为形参，宏调用中称为实参。带参数的宏，在调用中，不仅要宏展开，而且要用实参去代换形参。
宏定义中的特殊操作符 （1）#
希望在字符串中包含宏参数时使用，#作为一个预处理运算符，可以把语言符号转换为字符串，例如：
#define NUM(x) printf(&amp;#34;the number is #x.\n&amp;#34;, x) （2）##
##可以把两个字符串转换成单个字符串。
#define XNAME(n) x##n int XNAME(1) = 12;	//相当于int x1 = 12; （3）可变宏 &amp;hellip;
若要使用可变参数宏，可以在宏定义中将省略号指定为最后一个形参，并且替换标识符可以在定义中用于插入 __VA_ARGS__ 额外的参数。 __VA_ARGS__ 替换为与省略号匹配的所有参数，包括它们之间的逗号。
// variadic_macros.cpp #include &amp;lt;stdio.h&amp;gt;#define EMPTY  #define CHECK1(x, ...) if (!(x)) { printf(__VA_ARGS__); } #define CHECK2(x, ...) if ((x)) { printf(__VA_ARGS__); } #define CHECK3(...) { printf(__VA_ARGS__); } #define MACRO(s, .</description>
    </item>
    
  </channel>
</rss>
