<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/</link>
    <description>Recent content on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Wed, 22 Dec 2021 15:49:36 +0800</lastBuildDate>
    
        <atom:link href="https://eternityqjl.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>测试机器大小端的方法</title>
        <link>https://eternityqjl.top/posts/%E6%B5%8B%E8%AF%95%E6%9C%BA%E5%99%A8%E5%A4%A7%E5%B0%8F%E7%AB%AF%E7%9A%84%E6%96%B9%E6%B3%95/</link>
        <pubDate>Wed, 22 Dec 2021 15:49:36 +0800</pubDate>
        
        <guid>https://eternityqjl.top/posts/%E6%B5%8B%E8%AF%95%E6%9C%BA%E5%99%A8%E5%A4%A7%E5%B0%8F%E7%AB%AF%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
        <description>Jialong&#39;s Blog https://eternityqjl.top/posts/%E6%B5%8B%E8%AF%95%E6%9C%BA%E5%99%A8%E5%A4%A7%E5%B0%8F%E7%AB%AF%E7%9A%84%E6%96%B9%E6%B3%95/ -&lt;ul&gt;
&lt;li&gt;小端法：低位字节存放在低地址，高位字节存放在高地址&lt;/li&gt;
&lt;li&gt;大端法：低位字节存放在高地址，高位字节存放在低地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;判断电脑大小端模式的方法：&lt;/p&gt;
&lt;h2 id=&#34;方法一&#34;&gt;方法一&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;C语言中的char和int：&lt;/p&gt;
&lt;p&gt;在C语言中并没有char类型的常量，其实是用int类型表示char。举个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;char&lt;/span&gt; ch &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#04d;background-color:#fff0f0&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#888&#34;&gt;//分别输出ch的字符和对应的ascii码。即打印出的是字符或整数
&lt;/span&gt;&lt;span style=&#34;color:#888&#34;&gt;&lt;/span&gt;printf(&lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;%c, %d&amp;#34;&lt;/span&gt;, ch, ch);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果为：a, 97&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将int 48存起来，然后取得其地址，再将这个地址转为char* 这时候，如果是小端存储，那么char*指针就指向48；48对应的ASCII码为字符‘0’；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;judge1&lt;/span&gt;() {
    &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;48&lt;/span&gt;;
    &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#333&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;amp;&lt;/span&gt;i;
    &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;;
    c &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#333&#34;&gt;*&lt;/span&gt;)p);

    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;if&lt;/span&gt; (c &lt;span style=&#34;color:#333&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#04d;background-color:#fff0f0&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)
        cout &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;小端&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;else&lt;/span&gt;
        cout &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;大端&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;方法二&#34;&gt;方法二&lt;/h2&gt;
&lt;p&gt;定义变量int i=1；将 i 的地址拿到，强转成char*型，这时候就取到了 i 的低地址，这时候如果是1就是小端存储，如果是0就是大端存储。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;judge2&lt;/span&gt;() {
    &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#333&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#333&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#333&#34;&gt;&amp;amp;&lt;/span&gt;i);

    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;if&lt;/span&gt; (c)
        cout &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;小端&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;else&lt;/span&gt;
        cout &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;大端&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;方法三&#34;&gt;方法三&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;联合体union是一种特殊数据类型，允许在相同的内存位置存储不同的数据类型。可以定义一个带有多成员的共同体，但任何时候只能有一个成员带有值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定义联合体，一个成员是多字节，一个是单字节，给多字节的成员赋一个最低一个字节不为0，其他字节为0 的值，再用第二个成员来判断，如果第二个字节不为0，就是小端，若为0，就是大端。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;judge3&lt;/span&gt;() {
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;union&lt;/span&gt;
    {
        &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; i;
        &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;char&lt;/span&gt; c;
    } un;
    un.i &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;if&lt;/span&gt; (un.c &lt;span style=&#34;color:#333&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;)
        cout &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;小端&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;else&lt;/span&gt;
        cout &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;大端&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://eternityqjl.top/posts/%E6%B5%8B%E8%AF%95%E6%9C%BA%E5%99%A8%E5%A4%A7%E5%B0%8F%E7%AB%AF%E7%9A%84%E6%96%B9%E6%B3%95/ - 2019-2021 By Jialong</description>
        </item>
    
    
    
        <item>
        <title>Cpp容器库和相关操作总结</title>
        <link>https://eternityqjl.top/posts/cpp%E5%AE%B9%E5%99%A8%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</link>
        <pubDate>Thu, 16 Dec 2021 15:34:43 +0800</pubDate>
        
        <guid>https://eternityqjl.top/posts/cpp%E5%AE%B9%E5%99%A8%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</guid>
        <description>Jialong&#39;s Blog https://eternityqjl.top/posts/cpp%E5%AE%B9%E5%99%A8%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/ -&lt;h1 id=&#34;顺序容器&#34;&gt;顺序容器&lt;/h1&gt;
&lt;h2 id=&#34;vector&#34;&gt;vector&lt;/h2&gt;
&lt;p&gt;member functions：&lt;/p&gt;
&lt;p&gt;constructor、destructor、operator=、assign、get_allocator&lt;/p&gt;
&lt;h3 id=&#34;element-access&#34;&gt;Element access&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;at&lt;/li&gt;
&lt;li&gt;operator&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;/li&gt;
&lt;li&gt;front&lt;/li&gt;
&lt;li&gt;back&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iterators&#34;&gt;Iterators&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;begin/cbegin&lt;/li&gt;
&lt;li&gt;end/cend&lt;/li&gt;
&lt;li&gt;rbegin/c rbegin&lt;/li&gt;
&lt;li&gt;rend/c rend&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;capacity&#34;&gt;Capacity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;empty&lt;/li&gt;
&lt;li&gt;size&lt;/li&gt;
&lt;li&gt;max_size&lt;/li&gt;
&lt;li&gt;reserve&lt;/li&gt;
&lt;li&gt;capacity&lt;/li&gt;
&lt;li&gt;shrink_to_fit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modifiers&#34;&gt;Modifiers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;clear&lt;/li&gt;
&lt;li&gt;insert&lt;/li&gt;
&lt;li&gt;emplace：相较于insert，不需要产生一个临时变量。&lt;/li&gt;
&lt;li&gt;erase&lt;/li&gt;
&lt;li&gt;push_back&lt;/li&gt;
&lt;li&gt;resize&lt;/li&gt;
&lt;li&gt;swap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;non-member functions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;operator==&lt;/li&gt;
&lt;li&gt;swap&lt;/li&gt;
&lt;li&gt;erase&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deque&#34;&gt;deque&lt;/h2&gt;
&lt;p&gt;双端队列&lt;/p&gt;
&lt;h2 id=&#34;list&#34;&gt;list&lt;/h2&gt;
&lt;p&gt;双向链表&lt;/p&gt;
&lt;h2 id=&#34;forward_list&#34;&gt;forward_list&lt;/h2&gt;
&lt;p&gt;单向链表&lt;/p&gt;
&lt;h2 id=&#34;array&#34;&gt;array&lt;/h2&gt;
&lt;p&gt;array 容器的大小是固定的，无法动态的扩展或收缩，这也就意味着，在使用该容器的过程无法借由增加或移除元素而改变其大小，它只允许访问或者替换存储的元素。&lt;/p&gt;
&lt;h2 id=&#34;string&#34;&gt;string&lt;/h2&gt;
&lt;h3 id=&#34;iterators-1&#34;&gt;Iterators&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;begin/cbegin&lt;/li&gt;
&lt;li&gt;end/cend&lt;/li&gt;
&lt;li&gt;rbegin/c rbegin&lt;/li&gt;
&lt;li&gt;rend/c rend&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;capacity-1&#34;&gt;Capacity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;empty&lt;/li&gt;
&lt;li&gt;size&lt;/li&gt;
&lt;li&gt;length&lt;/li&gt;
&lt;li&gt;max_size&lt;/li&gt;
&lt;li&gt;reserve&lt;/li&gt;
&lt;li&gt;capacity&lt;/li&gt;
&lt;li&gt;clear&lt;/li&gt;
&lt;li&gt;shrink_to_fit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;element-access-1&#34;&gt;Element access&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;at&lt;/li&gt;
&lt;li&gt;operator&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;/li&gt;
&lt;li&gt;front&lt;/li&gt;
&lt;li&gt;back&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modifiers-1&#34;&gt;Modifiers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;+=&lt;/li&gt;
&lt;li&gt;append&lt;/li&gt;
&lt;li&gt;push_back&lt;/li&gt;
&lt;li&gt;assign&lt;/li&gt;
&lt;li&gt;insert&lt;/li&gt;
&lt;li&gt;erase&lt;/li&gt;
&lt;li&gt;replace&lt;/li&gt;
&lt;li&gt;swap&lt;/li&gt;
&lt;li&gt;pop_back&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;关联容器&#34;&gt;关联容器&lt;/h1&gt;
&lt;h2 id=&#34;set&#34;&gt;set&lt;/h2&gt;
&lt;h3 id=&#34;iterators-2&#34;&gt;Iterators&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;begin / cbegin&lt;/li&gt;
&lt;li&gt;end / cend&lt;/li&gt;
&lt;li&gt;rbegin / c rbegin&lt;/li&gt;
&lt;li&gt;rend / c rend&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;capacity-2&#34;&gt;Capacity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;empty&lt;/li&gt;
&lt;li&gt;size&lt;/li&gt;
&lt;li&gt;max_size&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modifiers-2&#34;&gt;Modifiers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;clear&lt;/li&gt;
&lt;li&gt;insert&lt;/li&gt;
&lt;li&gt;emplace&lt;/li&gt;
&lt;li&gt;emplace_hint&lt;/li&gt;
&lt;li&gt;erase&lt;/li&gt;
&lt;li&gt;swap&lt;/li&gt;
&lt;li&gt;extract&lt;/li&gt;
&lt;li&gt;merge&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lookup&#34;&gt;Lookup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;count&lt;/li&gt;
&lt;li&gt;find&lt;/li&gt;
&lt;li&gt;contains&lt;/li&gt;
&lt;li&gt;equal_range&lt;/li&gt;
&lt;li&gt;lower_bound&lt;/li&gt;
&lt;li&gt;upper_bound&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;map&#34;&gt;map&lt;/h2&gt;
&lt;h3 id=&#34;element-accress&#34;&gt;Element accress&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;at&lt;/li&gt;
&lt;li&gt;operator &lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iterators-3&#34;&gt;Iterators&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;begin / cbegin&lt;/li&gt;
&lt;li&gt;end / cend&lt;/li&gt;
&lt;li&gt;rbegin / c rbegin&lt;/li&gt;
&lt;li&gt;rend / c rend&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;capacity-3&#34;&gt;Capacity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;empty&lt;/li&gt;
&lt;li&gt;size&lt;/li&gt;
&lt;li&gt;max_size&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modifiers-3&#34;&gt;Modifiers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;clear&lt;/li&gt;
&lt;li&gt;insert&lt;/li&gt;
&lt;li&gt;insert_or_assign&lt;/li&gt;
&lt;li&gt;emplace&lt;/li&gt;
&lt;li&gt;emplace_hint&lt;/li&gt;
&lt;li&gt;try_emplace&lt;/li&gt;
&lt;li&gt;erase&lt;/li&gt;
&lt;li&gt;swap&lt;/li&gt;
&lt;li&gt;extract&lt;/li&gt;
&lt;li&gt;merge&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lookup-1&#34;&gt;Lookup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;count&lt;/li&gt;
&lt;li&gt;find&lt;/li&gt;
&lt;li&gt;contains&lt;/li&gt;
&lt;li&gt;equal_range&lt;/li&gt;
&lt;li&gt;lower_bound&lt;/li&gt;
&lt;li&gt;upper_bound&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;multimap&#34;&gt;multimap&lt;/h2&gt;
&lt;p&gt;允许多个多个元素具有相同的关键词。主要应用有：例如词典中一个单词可以有多个意思。&lt;/p&gt;
&lt;h2 id=&#34;multiset&#34;&gt;multiset&lt;/h2&gt;
&lt;h2 id=&#34;unordered_map&#34;&gt;unordered_map&lt;/h2&gt;
&lt;p&gt;无序容器不使用比较运算符来组织元素，而是使用一个哈希函数和关键字类型的==运算符。在关键字类型的元素没有明显的序关系的情况下，无序容器非常有用。某些应用中维护元素序的代价非常高昂，此时无序容器也很有用。&lt;/p&gt;
&lt;h2 id=&#34;unordered_set&#34;&gt;unordered_set&lt;/h2&gt;
&lt;h2 id=&#34;unordered_multimap&#34;&gt;unordered_multimap&lt;/h2&gt;
&lt;h2 id=&#34;unordered_multimet&#34;&gt;unordered_multimet&lt;/h2&gt;
&lt;h1 id=&#34;容器适配器&#34;&gt;容器适配器&lt;/h1&gt;
&lt;h2 id=&#34;priority_queue&#34;&gt;priority_queue&lt;/h2&gt;
&lt;h3 id=&#34;element-access-2&#34;&gt;Element access&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;top&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;capacity-4&#34;&gt;Capacity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;empty&lt;/li&gt;
&lt;li&gt;size&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modifiers-4&#34;&gt;Modifiers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;emplace&lt;/li&gt;
&lt;li&gt;pop&lt;/li&gt;
&lt;li&gt;swap&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stack&#34;&gt;stack&lt;/h2&gt;
&lt;p&gt;与priority_queue相同。&lt;/p&gt;
&lt;h2 id=&#34;queue&#34;&gt;queue&lt;/h2&gt;
&lt;h3 id=&#34;element-access-3&#34;&gt;Element access&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;front&lt;/li&gt;
&lt;li&gt;back&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;capacity-5&#34;&gt;Capacity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;empty&lt;/li&gt;
&lt;li&gt;size&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modifiers-5&#34;&gt;Modifiers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;emplace&lt;/li&gt;
&lt;li&gt;pop&lt;/li&gt;
&lt;li&gt;swap&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;list-1&#34;&gt;list&lt;/h2&gt;
- https://eternityqjl.top/posts/cpp%E5%AE%B9%E5%99%A8%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/ - 2019-2021 By Jialong</description>
        </item>
    
    
    
        <item>
        <title>C程序字节对齐方式</title>
        <link>https://eternityqjl.top/posts/c%E7%A8%8B%E5%BA%8F%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F/</link>
        <pubDate>Tue, 14 Dec 2021 16:38:12 +0800</pubDate>
        
        <guid>https://eternityqjl.top/posts/c%E7%A8%8B%E5%BA%8F%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F/</guid>
        <description>Jialong&#39;s Blog https://eternityqjl.top/posts/c%E7%A8%8B%E5%BA%8F%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F/ -&lt;h2 id=&#34;默认字节对齐&#34;&gt;默认字节对齐&lt;/h2&gt;
&lt;p&gt;int类型放在地址能被4整除的位置，short类型放在地址能被2整除的位置，char能放在任何位置。&lt;/p&gt;
&lt;p&gt;结构体的对其满足以下原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构体变量的首地址能够被其最宽基本类型成员的大小所整除。&lt;/li&gt;
&lt;li&gt;结构体每个成员相对于结构体首地址的偏移量都是成员大小的整数倍，如有需要编译器会在成员之间填充字节。&lt;/li&gt;
&lt;li&gt;结构体的总大小为结构体最宽基本类型成员大小的整数倍，如有需要编译器会在最末一个成员后填充字节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pragma-pack命令&#34;&gt;#pragma pack()命令&lt;/h2&gt;
&lt;p&gt;改命令强制规定了成员的对齐方式，括号内为对齐的字节数。若括号内的内容为空，则为默认对齐。&lt;/p&gt;
&lt;p&gt;改变默认对齐方式能够更加充分利用存储空间，但降低了计算机的读写速率，是一种以空间换事件的方法。&lt;/p&gt;
- https://eternityqjl.top/posts/c%E7%A8%8B%E5%BA%8F%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F/ - 2019-2021 By Jialong</description>
        </item>
    
    
    
        <item>
        <title>Csapp：7.链接</title>
        <link>https://eternityqjl.top/posts/csapp-7-%E9%93%BE%E6%8E%A5/</link>
        <pubDate>Sat, 11 Dec 2021 21:38:11 +0800</pubDate>
        
        <guid>https://eternityqjl.top/posts/csapp-7-%E9%93%BE%E6%8E%A5/</guid>
        <description>Jialong&#39;s Blog https://eternityqjl.top/posts/csapp-7-%E9%93%BE%E6%8E%A5/ -&lt;h2 id=&#34;编译器驱动程序&#34;&gt;编译器驱动程序&lt;/h2&gt;
&lt;p&gt;编译器驱动程序代表用户在需要时调用语言预处理器、编译器、汇编器和链接器。&lt;/p&gt;
&lt;p&gt;main.c$\rightarrow$main.i$\rightarrow$main.s$\rightarrow$main.o$\rightarrow$prog&lt;/p&gt;
&lt;p&gt;源程序$\rightarrow$中间文件$\rightarrow$汇编语言文件$\rightarrow$&lt;strong&gt;可重定位目标文件&lt;/strong&gt;$\rightarrow$&lt;strong&gt;可执行目标文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;依次使用了：预处理器、编译器、汇编器 、链接器&lt;/p&gt;
&lt;p&gt;shell执行可执行文件时调用操作系统中的加载器函数，将prog中的代码和数据复制到内存中，然后将控制转移到这个程序的开头。&lt;/p&gt;
&lt;h2 id=&#34;静态链接&#34;&gt;静态链接&lt;/h2&gt;
&lt;p&gt;静态链接器以一组&lt;strong&gt;可重定位目标文件和命令行参数&lt;/strong&gt;作为输入，生成一个&lt;strong&gt;完全链接的、可以加载和运行的可执行目标文件&lt;/strong&gt;作为输出。&lt;/p&gt;
&lt;p&gt;为了构造可执行文件，链接器必须完成连个任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;符号解析&lt;/strong&gt;：目标文件定义和引用符号，每个符号对应一个函数、一个全局变量或一个静态变量。将每个符号引用正好和一个符号定义关联起来。（每个符号对应于一个函数、一个全局变量或一个静态变量）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重定位&lt;/strong&gt;。编译器和汇编器生成从地址0开始的代码和数据节。链接器通过把每个符号定义与一个内存位置关联起来，从而重定位这些节，然后修改所有对这些符号的引用，使它们指向这个内存位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目标文件&#34;&gt;目标文件&lt;/h2&gt;
&lt;p&gt;共有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可重定位目标文件：二进制代码和数据，可在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。&lt;/li&gt;
&lt;li&gt;可执行目标文件：二进制代码和数据，其形式可以直接被复制到内存中并执行。&lt;/li&gt;
&lt;li&gt;共享目标文件：特殊类型的可重定位目标文件，可以在加载或运行时被&lt;strong&gt;动态地加载进内存并链接&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目标文件是按照特定目标文件格式来组织的，各个系统的目标文件格式都不相同。&lt;/p&gt;
&lt;h2 id=&#34;可重定位目标文件&#34;&gt;可重定位目标文件&lt;/h2&gt;
&lt;p&gt;一个典型的ELF可重定位目标文件：&lt;/p&gt;
&lt;p&gt;首先是16B的ELF头，描述了生成该文件的系统的字的大小和字节顺序。&lt;/p&gt;
&lt;p&gt;然后是节：一个典型的ELF可重定位目标文件包含以下几个节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.text：已编译程序的机器代码&lt;/li&gt;
&lt;li&gt;.rodata：只读数据&lt;/li&gt;
&lt;li&gt;.data：已初始化的全局和静态C变量&lt;/li&gt;
&lt;li&gt;.bss：未初始化的全局和静态C变量，以及所有被初始化为0的全局或静态变量&lt;/li&gt;
&lt;li&gt;.symtab：一个符号表，存放在程序中定义和引用的函数和全局变量的信息&lt;/li&gt;
&lt;li&gt;.debug：调试符号表&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;符号和符号表&#34;&gt;符号和符号表&lt;/h2&gt;
&lt;p&gt;每个可重定位目标模块都有一个符号表，它包含m定义和引用的符号的信息。在链接器的上下文，有三种不同符号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由模块m定义并能被其他模块引用的全局符号：对应非静态的C函数和全局变量。&lt;/li&gt;
&lt;li&gt;由其他模块定义并被m引用的全局符号，称为外部符号：对应其他模块中定义的非静态的C函数和全局变量&lt;/li&gt;
&lt;li&gt;只被模块m定义和引用的局部符号：对应于带static属性的C函数和全局变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本地非静态程序变量的符号在运行时在栈中被管理，不在符号表.symtab中。&lt;/p&gt;
&lt;p&gt;C中源文件扮演模块的角色，static属性就像C++使用的public和private一样。&lt;/p&gt;
&lt;p&gt;尽可能用static属性来保护变量和函数。&lt;/p&gt;
&lt;h2 id=&#34;符号解析&#34;&gt;符号解析&lt;/h2&gt;
&lt;p&gt;链接器解析符号引用的方法是将&lt;strong&gt;每个引用&lt;/strong&gt;与它输入的可重定位目标文件的符号表中的一个确定的&lt;strong&gt;符号定义&lt;/strong&gt;关联起来。&lt;/p&gt;
&lt;p&gt;对于引用和定义在相同模块中的局部符号（即对应static变量）的引用，符号解析非常简洁明了。编译器只允许每个局部符号有一个定义。&lt;/p&gt;
&lt;p&gt;对于全局符号的引用较为复杂，当编译器遇到一个不是在当前模块中定义的符号时，会假设该符号是在其他某个模块中定义的，生成一个链接器符号表，交给链接器处理。如果链接器在其他任何模块中都找不到这个被引用的符号，就输出一条错误信息并终止。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编译器通过重整的编码方式来区分重载的函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;链接器解析多重定义的全局符号&#34;&gt;链接器解析多重定义的全局符号&lt;/h3&gt;
&lt;p&gt;编译器向汇编器输出每个全局符号，或是强或是弱的，而汇编器把这些信息隐含地编码在可重定位目标文件的符号表里。&lt;strong&gt;函数和已初始化的全局变量&lt;/strong&gt;是强符号，&lt;strong&gt;未初始化的全局变量&lt;/strong&gt;是弱符号。&lt;/p&gt;
&lt;p&gt;Linux使用以下规则处理多重定义的符号名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不允许由多个同名强符号&lt;/li&gt;
&lt;li&gt;如果一个强符号和多个弱符号同名，选择强符号&lt;/li&gt;
&lt;li&gt;如果有多个弱符号同名，从这些弱符号中任意选一个&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与静态库链接&#34;&gt;与静态库链接&lt;/h3&gt;
&lt;p&gt;所有编译器都有一种机制，将所有相关的目标模块打包成一个单独的文件，称为静态库，它可以用作链接器的输入。链接器构造一个输出的可执行文件时，只复制静态库里被应用程序引用的目标模块。&lt;/p&gt;
&lt;p&gt;Linux中，静态库以一种称为存档的特殊文件格式存放在磁盘中，存档文件是一组连接起来的可重定位目标文件的集合，有一个头部用来描述每个成员目标文件的大小，存档文件名由后缀&lt;code&gt;.a&lt;/code&gt;标识。&lt;/p&gt;
&lt;h3 id=&#34;链接器如何使用静态库来解析引用&#34;&gt;链接器如何使用静态库来解析引用&lt;/h3&gt;
&lt;p&gt;链接器从左到右按照在命令行上出现的顺序来扫描可重定位目标文件和存档文件。（编译器驱动程序自动将&lt;code&gt;.c&lt;/code&gt;文件翻译为&lt;code&gt;.0&lt;/code&gt;文件。在扫描中，链接器维护一个可重定位目标文件的集合E，一个未解析的符号集合U，以及一个在前面输入文件中已定义的符号集合D。初始时，E、U、D均为空。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于命令行上的每个输入文件f，链接器会判断f是一个目标文件还是一个存档文件。如果时目标文件则将其添加到E中，修改U和D来反映f中的符号引用和定义&lt;/li&gt;
&lt;li&gt;如果f是存档文件，链接器就尝试匹配U中未解析的符号和由存档文件成员定义的符号。如果某个存档文件成员m定义了一个符号来解析U中的一个引用，那么就把m加到E中，并修改U和D来反映m中的符号定义和引用。对存档文件依次重复这个过程直到U和D不发生变化。&lt;/li&gt;
&lt;li&gt;如果链接器完成对命令行输入文件的扫描后，U是非空的，则链接器输出错误并终止。否则，合并然后重定位E中的文件，构建可执行文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重定位&#34;&gt;重定位&lt;/h2&gt;
&lt;p&gt;链接器完成符号解析这一步后，就把代码中的每个符号引用和一个符号定义关联起来，此时链接器就知道它的输入目标模块中的代码和数据节的确切大小。然后就可以开始重定位步骤了，该步骤将&lt;strong&gt;合并输入模块&lt;/strong&gt;，并为每个符号分配&lt;strong&gt;运行时地址&lt;/strong&gt;。共分为两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重定位节和符号定义&lt;/li&gt;
&lt;li&gt;重定位节中的符号引用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重定位条目&#34;&gt;重定位条目&lt;/h3&gt;
&lt;h3 id=&#34;重定位符号引用&#34;&gt;重定位符号引用&lt;/h3&gt;
&lt;h2 id=&#34;可执行目标文件&#34;&gt;可执行目标文件&lt;/h2&gt;
&lt;p&gt;转化后的二进制的可执行目标文件包含加载程序到内存并运行它所需的所有信息。&lt;/p&gt;
&lt;p&gt;可执行目标文件格式类似于可重定位目标文件，ELF头描述文件的总体格式，还包括程序的入口点，即程序要运行时执行的第一条指令的地址。&lt;code&gt;.init&lt;/code&gt;节定义了一个小函数&lt;code&gt;_init&lt;/code&gt;，程序初始化代码会调用它。&lt;/p&gt;
&lt;p&gt;可执行文件是完全链接的，所以它不需要rel节。&lt;/p&gt;
&lt;h2 id=&#34;加载可执行目标文件&#34;&gt;加载可执行目标文件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;linux&amp;gt; ./prog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;shell认为prog是一个可执行目标文件，通过调用驻留在存储器中的加载器的系统代码来运行它。加载器将可执行目标文件中的代码和数据从磁盘复制到内存，然后通过跳转到程序的入口点运行该程序。&lt;/p&gt;
&lt;p&gt;加载与之后章节的进程、虚拟内存和内存映射有关。之后章节还会介绍。&lt;/p&gt;
&lt;h2 id=&#34;动态链接共享库&#34;&gt;动态链接共享库&lt;/h2&gt;
&lt;p&gt;静态库有一个缺点，需要定期维护和更新，如果应用程序需要一个新版本，必须以某种方式了解到该库的变化情况，然后显式地将其程序与更新了的库重新连接。&lt;/p&gt;
&lt;p&gt;另一个问题是几乎每个C程序都使用标准I/O函数。运行时这些代码会被复制到每个运行进程的文本中，在一个上百个进程的系统上，这是对内存资源的极大浪费。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共享库&lt;/strong&gt;用来解决静态库的缺陷，共享库是一个目标模块，在&lt;strong&gt;运行或加载时&lt;/strong&gt;，可以加载到任意内存地址，并与一个在内存中的程序链接起来。这个过程称为&lt;strong&gt;动态链接&lt;/strong&gt;，由叫做动态链接器的程序执行。Linux中用&lt;code&gt;.so&lt;/code&gt;后缀的文件来表示共享库，Windows中使用&lt;code&gt;.dll&lt;/code&gt;表示。&lt;/p&gt;
&lt;p&gt;任何给定文件系统中，对于一个库文件只有一个&lt;code&gt;.so&lt;/code&gt;文件。所有引用该库的可执行目标文件共享这个&lt;code&gt;.so&lt;/code&gt;文件中的数据和代码，不需要都复制和嵌入到引用它们的可执行文件中。&lt;/p&gt;
&lt;h2 id=&#34;位置无关代码&#34;&gt;位置无关代码&lt;/h2&gt;
&lt;p&gt;可以加载而无需重定位的代码称为位置无关代码（PIC）。使用这种方法，无限多个进程可以共享一个共享模块的代码段的单一副本。&lt;/p&gt;
&lt;h3 id=&#34;pic数据引用&#34;&gt;PIC数据引用&lt;/h3&gt;
&lt;h3 id=&#34;pic函数调用&#34;&gt;PIC函数调用&lt;/h3&gt;
&lt;h2 id=&#34;库打桩机制&#34;&gt;库打桩机制&lt;/h2&gt;
- https://eternityqjl.top/posts/csapp-7-%E9%93%BE%E6%8E%A5/ - 2019-2021 By Jialong</description>
        </item>
    
    
    
        <item>
        <title>算法——TopK问题总结</title>
        <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95topk%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</link>
        <pubDate>Sat, 11 Dec 2021 10:18:53 +0800</pubDate>
        
        <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95topk%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
        <description>Jialong&#39;s Blog https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95topk%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/ -&lt;p&gt;从具有n个数的数组中，找出最大的k数。&lt;/p&gt;
&lt;h2 id=&#34;排序&#34;&gt;排序&lt;/h2&gt;
&lt;p&gt;将整个数组排序，取出前k大个数。&lt;/p&gt;
&lt;p&gt;时间复杂度：$O(n\log_2 n)$&lt;/p&gt;
&lt;p&gt;优化方法：只排序最大的k个数&lt;/p&gt;
&lt;h2 id=&#34;局部排序&#34;&gt;局部排序&lt;/h2&gt;
&lt;p&gt;进行k次冒泡排序，得到最大的k个数&lt;/p&gt;
&lt;p&gt;时间复杂度：$O(n\cdot k)$&lt;/p&gt;
&lt;p&gt;优化方法：只找出最大的k个数，不对它们进行排序&lt;/p&gt;
&lt;h2 id=&#34;堆&#34;&gt;堆&lt;/h2&gt;
&lt;p&gt;先用前k个元素生成一个小根堆，接着从第k+1个元素开始扫描，与堆顶元素进行比较，若被扫描元素大于堆顶，则将其替换，然后调整堆。&lt;/p&gt;
&lt;p&gt;时间复杂度：$O(n\log_2 k)$&lt;/p&gt;
&lt;h2 id=&#34;随机选择&#34;&gt;随机选择&lt;/h2&gt;
&lt;p&gt;减治法，使用快速排序中的partition找到第k大元素，递归时当前半部分小于k时就求后半部分第k-i大元素，当前半部分大于k时就求前半部分第k大元素。&lt;/p&gt;
&lt;p&gt;时间复杂度为$O(n)$&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/z50L2O08e2u4afToR9A/article/details/82837278&#34;&gt;拜托，面试别再问我TopK了！！！&lt;/a&gt;&lt;/p&gt;
- https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95topk%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/ - 2019-2021 By Jialong</description>
        </item>
    
    
    
        <item>
        <title>算法——基础查找算法实现</title>
        <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Sat, 11 Dec 2021 09:49:24 +0800</pubDate>
        
        <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
        <description>Jialong&#39;s Blog https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/ -&lt;h2 id=&#34;二分查找&#34;&gt;二分查找&lt;/h2&gt;
&lt;p&gt;只能在有序数组中进行二分查找。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;binarySearch&lt;/span&gt;(vector&lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#333&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; k, &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; low, &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; high) {\
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;if&lt;/span&gt; (low &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;=&lt;/span&gt; high) {
        &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; mid &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; (low &lt;span style=&#34;color:#333&#34;&gt;+&lt;/span&gt; high) &lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;2&lt;/span&gt;;
        &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;if&lt;/span&gt; (nums[mid] &lt;span style=&#34;color:#333&#34;&gt;==&lt;/span&gt; k)
            &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;true&lt;/span&gt;;
        &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			binarySearch(nums, k, low, mid &lt;span style=&#34;color:#333&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;);
            binarySearch(nums, k, mid &lt;span style=&#34;color:#333&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;, high);
        }
    }
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;false&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二叉查找树&#34;&gt;二叉查找树&lt;/h2&gt;
&lt;p&gt;查找、插入都非常简单。&lt;/p&gt;
&lt;h2 id=&#34;平衡查找树&#34;&gt;平衡查找树&lt;/h2&gt;
&lt;p&gt;2-3树和红黑树，详见&lt;a href=&#34;https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E7%BA%A2%E9%BB%91%E6%A0%91/&#34;&gt;算法——红黑树&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;散列表&#34;&gt;散列表&lt;/h2&gt;
&lt;h3 id=&#34;散列函数的构造方法&#34;&gt;散列函数的构造方法&lt;/h3&gt;
&lt;p&gt;构造散列函数时的注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;散列函数的定义域要包含&lt;strong&gt;全部的关键字&lt;/strong&gt;，而值域范围则依赖于散列表大小或地址范围。&lt;/li&gt;
&lt;li&gt;散列函数计算出的地址应该能&lt;strong&gt;等概率、均匀地&lt;/strong&gt;分布在整个地址空间中&lt;/li&gt;
&lt;li&gt;散列函数应&lt;strong&gt;尽量简单&lt;/strong&gt;，能在&lt;strong&gt;较短时间内计算出&lt;/strong&gt;任一关键字对应的散列地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;直接定址法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接取关键字的某个线性函数值为散列地址，散列函数为：
$$
H(key)=key或H(key)=a\times key +b
$$
这种方法较为简单且不会产生冲突，适合关键字分布基本连续的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;除留余数法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一种最简单、最常用的方法。假定散列表表厂为m，取一个不大于m但最接近或等于m的质数p，利用以下公式把关键字转换成散列地址：
$$
\text{H(key)=key%p}
$$
该方法的关键是选好p。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数字分析法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平方取中法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;取关键字的平方值的中间几位作为散列地址。这种方法得到的散列地址与关键字的每位都有关系，因此使得散列地址分布比较均匀，适用于关键字的每位取值都不够均匀或均小于散列地址所需的位数。&lt;/p&gt;
&lt;h3 id=&#34;处理冲突的方法&#34;&gt;处理冲突的方法&lt;/h3&gt;
&lt;p&gt;发生冲突时的处理方法，即为产生冲突的关键字寻找&lt;strong&gt;下一个空的Hash地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开放定址法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开放定址法指的是&lt;strong&gt;可存放新表项的空闲地址&lt;/strong&gt;既向它的&lt;strong&gt;同义&lt;/strong&gt;表项开放，又向它的&lt;strong&gt;非同义&lt;/strong&gt;词表项开放。数学递推公式为：
$$
H_i=(H(key)+d_i)%m
$$
$H(key)$为散列函数；i=0,1,2,&amp;hellip;,k；$m$表示散列表表长；$d_i$为增量序列。&lt;/p&gt;
&lt;p&gt;取定某一增量序列后，对应处理方法就确定了，通常有以下四种取法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线性探测法&lt;/strong&gt;：$d_i=0,1,2,&amp;hellip;,m-1$。冲突发生时，顺序查看表中&lt;strong&gt;下一个单元&lt;/strong&gt;，直到找出一个空闲地址或查遍全表。这种方法可能会造成大量元素在&lt;strong&gt;相邻散列地址上的聚集&lt;/strong&gt;，大大降低了查找效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;平方探测法&lt;/strong&gt;：$d_i=0^2,1^2,-1^2,2^2,-2^2,&amp;hellip;,k^2,-k^2$。其中$k\leq m/2$，散列表m的长度m必须是一个可以表示成4k+3的素数。平方探测法可以&lt;strong&gt;避免堆积&lt;/strong&gt;，但是不能探测到散列表上的所有单元。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;再散列法&lt;/strong&gt;：$d_i=Hash_2(key)$。需要使用&lt;strong&gt;两个散列函数&lt;/strong&gt;。利用第二个散列函数计算该关键字的地址增量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;伪随机序列法&lt;/strong&gt;：$d_i=伪随机序列$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;拉链法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把所有的同义词存储在&lt;strong&gt;一个线性链表&lt;/strong&gt;中，这个线性链表由其散列地址唯一标识。这种方法适用于&lt;strong&gt;经常进行插入和删除&lt;/strong&gt;的情况。&lt;/p&gt;
&lt;h3 id=&#34;性能分析&#34;&gt;性能分析&lt;/h3&gt;
&lt;p&gt;查找的时间为$O(1)$.&lt;/p&gt;
- https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/ - 2019-2021 By Jialong</description>
        </item>
    
    
    
        <item>
        <title>算法——B树和B&#43;树</title>
        <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95b%E6%A0%91%E5%92%8Cb&#43;%E6%A0%91/</link>
        <pubDate>Fri, 10 Dec 2021 18:03:30 +0800</pubDate>
        
        <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95b%E6%A0%91%E5%92%8Cb&#43;%E6%A0%91/</guid>
        <description>Jialong&#39;s Blog https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95b%E6%A0%91%E5%92%8Cb&#43;%E6%A0%91/ -&lt;h2 id=&#34;b树&#34;&gt;B树&lt;/h2&gt;
&lt;p&gt;平衡树算法的扩展，支持对保存在磁盘或网络上的符号表进行外部查找。&lt;/p&gt;
&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;
&lt;p&gt;又称&lt;strong&gt;多路平衡查找树&lt;/strong&gt;，B树中&lt;strong&gt;所有结点的孩子个数的最大值&lt;/strong&gt;称为&lt;strong&gt;B数的阶&lt;/strong&gt;，通常用&lt;strong&gt;m&lt;/strong&gt;表示。&lt;/p&gt;
&lt;p&gt;具有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;树中每个结点至多有&lt;strong&gt;m棵子树&lt;/strong&gt;，即至多含有&lt;strong&gt;m-1个关键字&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若根结点不是终端结点，则至少有&lt;strong&gt;两颗&lt;/strong&gt;子树。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有非叶子结点的结构：（见书上所示）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有叶子结点都出现在同一层次上，并且不带信息。（可视为类似于折半查找判定树的查找失败结点，实际上这些结点不存在）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B树是所有结点的&lt;strong&gt;平衡因子均等于0&lt;/strong&gt;的&lt;strong&gt;多路平衡查找树&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;b树的高度磁盘存取次数&#34;&gt;B树的高度（磁盘存取次数）&lt;/h3&gt;
&lt;p&gt;一般只讲B树的前两层放入内存中，剩余层级全部放在磁盘中，因此B树的高度就约为每次进行查找的磁盘存取次数。&lt;/p&gt;
&lt;p&gt;首先明确B树的高度不包含最后的不带任何信息的叶结点所处的那一层。&lt;/p&gt;
&lt;p&gt;假设$n\ge 1$，则对于任意一棵包含n个关键字，高度为h、阶数为m的B树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据树中关键字个数计算高度满足的范围&lt;/li&gt;
&lt;li&gt;若让每个结点中的关键字个数达到最少，则容纳同样多关键字的B树高度达到最大。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b树的查找&#34;&gt;B树的查找&lt;/h3&gt;
&lt;p&gt;每个结点具有多路分支。&lt;/p&gt;
&lt;p&gt;与二叉树的查找很相似，只是每个结点都是多个关键字的有序表，要在每个结点上根据该结点的子树做多路分支决定。&lt;/p&gt;
&lt;p&gt;包含两个基本操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在B树中找结点&lt;/li&gt;
&lt;li&gt;在结点内找关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B树常&lt;strong&gt;存储在磁盘中&lt;/strong&gt;，因此前一个查找操作是在&lt;strong&gt;磁盘&lt;/strong&gt;上进行的，后一个查找操作是在&lt;strong&gt;内存&lt;/strong&gt;中进行的，即在找到目标结点后，将其读入内存，然后在结点内采用&lt;strong&gt;顺序或折半&lt;/strong&gt;查找方法查找。&lt;/p&gt;
&lt;h3 id=&#34;b树的插入&#34;&gt;B树的插入&lt;/h3&gt;
&lt;p&gt;将关键字插入B树的过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定位&lt;/strong&gt;：利用前述的B树查找算法，找出插入该关键字的最低层中的某个非叶结点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插入&lt;/strong&gt;：每个非失败结点的关键字个数都在区间$[\lceil m/2\rceil-1,m-1]$内，插入后的结点关键字个数小于m，则可以直接插入；插入后的结点关键字大于m-1时，必须对结点进行&lt;strong&gt;分裂&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分裂的方法：取一个新结点，在插入key后的原结点，从中间位置（$\lceil m/2\rceil$）将其中的关键字分为两部分，左半部分包含的关键字放入&lt;strong&gt;原结点&lt;/strong&gt;中，右半部分包含的关键字放入&lt;strong&gt;新结点&lt;/strong&gt;中，中间位置（$\lceil m/2\rceil$）的结点插入&lt;strong&gt;原结点的父结点&lt;/strong&gt;中；如果父结点关键字个数也超过了上限，则继续&lt;strong&gt;进行这种分裂操作&lt;/strong&gt;，知道这个过程传到根结点为止，进而使得&lt;strong&gt;B树的高度增1&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;b树的删除&#34;&gt;B树的删除&lt;/h3&gt;
&lt;p&gt;与插入的操作类似，即要使得删除后结点中关键字的个数$\ge \lceil m/2\rceil-1$，将会涉及&lt;strong&gt;结点的合并&lt;/strong&gt;问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当被删除关键字k&lt;strong&gt;不在终端结点&lt;/strong&gt;：可以用k的前驱和后继替代k，然后在相应结点中删除该前驱或后继。该前驱或后继必定落在某个终端结点中，则转换成了被删关键字在终端结点中的情形。&lt;/li&gt;
&lt;li&gt;当被删除结点&lt;strong&gt;在终端结点&lt;/strong&gt;中时，有以下三种情况：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;直接删除关键字&lt;/strong&gt;。即被删除关键字所在结点的关键字个数$\ge \lceil m/2\rceil$，表明删除后仍满足B树定义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兄弟够接&lt;/strong&gt;。被删除前所在结点关键字个数$= \lceil m/2\rceil-1$，且与此结点相邻的兄弟结点的关键字个数$\ge \lceil m/2\rceil$，需要通过父子换位法进行调整，达到新的平衡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兄弟不够借&lt;/strong&gt;。被删除前所在结点关键字个数$= \lceil m/2\rceil-1$，且与此结点相邻的兄弟结点的关键字个数$= \lceil m/2\rceil -1$，则要将关键字删除后与左右兄弟结点及双亲结点中的关键字进行合并。合并过程中双亲结点中关键字会-1，若其双亲结点是根结点且关键字个数减少为0，则直接将根结点删除，合并后的新结点成为根结点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细例子见书上。&lt;/p&gt;
&lt;h3 id=&#34;性能&#34;&gt;性能&lt;/h3&gt;
&lt;p&gt;在实际应用中对于适当的阶数M，查找的成本是常数级别的。&lt;/p&gt;
&lt;h2 id=&#34;b树-1&#34;&gt;B+树&lt;/h2&gt;
&lt;p&gt;是B树的一种变形。一个&lt;strong&gt;m阶B+树&lt;/strong&gt;要满足以下条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个分支结点&lt;strong&gt;最多有m棵子树&lt;/strong&gt;（孩子结点）&lt;/li&gt;
&lt;li&gt;非叶根节点至少有两棵子树，其他每个分支结点至少有$ \lceil m/2\rceil$棵子树。&lt;/li&gt;
&lt;li&gt;结点的&lt;strong&gt;子树个数与关键字个数相等&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;所有&lt;strong&gt;叶结点&lt;/strong&gt;包含&lt;strong&gt;全部关键字&lt;/strong&gt;及&lt;strong&gt;指向相应记录的指针&lt;/strong&gt;，叶结点中将关键字按大小顺序排序，并且相邻叶结点按大小顺序相互链接起来。&lt;/li&gt;
&lt;li&gt;所有分支结点只包含它的&lt;strong&gt;子结点中关键字的最大值&lt;/strong&gt;以及&lt;strong&gt;指向其子结点的指针&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eternityqjl/blogGallery/master/B%2B%E6%A0%91.jpg&#34; alt=&#34;B+树&#34;&gt;&lt;/p&gt;
&lt;p&gt;通常B+树有两个头指针：一个&lt;strong&gt;指向根结点&lt;/strong&gt;，另一个&lt;strong&gt;指向关键字最小的叶结点&lt;/strong&gt;。因此对B+树进行两种查找运算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从最小关键字开始的&lt;strong&gt;顺序查找&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;从根结点开始的&lt;strong&gt;多路查找&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95b%E6%A0%91%E5%92%8Cb&#43;%E6%A0%91/ - 2019-2021 By Jialong</description>
        </item>
    
    
    
        <item>
        <title>算法——桶排序&amp;计数排序&amp;基数排序</title>
        <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E6%A1%B6%E6%8E%92%E5%BA%8F_%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F_%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Thu, 09 Dec 2021 10:55:47 +0800</pubDate>
        
        <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E6%A1%B6%E6%8E%92%E5%BA%8F_%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F_%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
        <description>Jialong&#39;s Blog https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E6%A1%B6%E6%8E%92%E5%BA%8F_%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F_%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/ -&lt;h2 id=&#34;桶排序bucket-sort&#34;&gt;桶排序（Bucket Sort）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;将待排元素划分到不同的桶中。先扫描一遍序列，找出最大值max和最小值min，设桶的个数为k，则把区间[min, max]划分为k个区间，每个区间就是一个桶。将序列中的元素分配到各自的桶。&lt;/li&gt;
&lt;li&gt;对每个桶内的元素进行排序。一般使用快速排序。&lt;/li&gt;
&lt;li&gt;将各桶中的元素合并为一个大的有序序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当k接近于n时，桶排序的时间复杂度为O(n)，即桶越多，时间效率就越高。&lt;/p&gt;
&lt;h2 id=&#34;计数排序counting-sort&#34;&gt;计数排序（Counting Sort）&lt;/h2&gt;
&lt;p&gt;新建一个大小为maxValue-minValue+1的数组nums，然后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分配。扫描一遍原始数组，以扫描到的当前值val减去1作为下标，将下标对应位置数组加1，即nums[val]++&lt;/li&gt;
&lt;li&gt;收集。顺序扫描一遍数组nums。数组的每个元素代表了按当前下标+1对应值的个数，将这些值收集起来放入新的数组就得到最终排序结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：nums=[2,1,3,1,5]，首先扫描一遍取最大值maxValue=5和最小值minValue=1，新建一个长度为5-1+1=5的数组nums：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分配：得到nums=[2,1,1,0,1]，例如nums[0]表示值为0+minValue=1出现了两次。&lt;/li&gt;
&lt;li&gt;收集：得到结果，[1,1,2,3,5]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质上是一种&lt;strong&gt;特殊的桶排序&lt;/strong&gt;。当桶的个数等于元素个数时就是计数排序。&lt;/p&gt;
&lt;h2 id=&#34;基数排序&#34;&gt;基数排序&lt;/h2&gt;
&lt;p&gt;基于关键字各位的大小进行排序。是一种借助多关键字排序的思想对单逻辑关键字进行排序的方法。&lt;/p&gt;
&lt;p&gt;共有&lt;strong&gt;最高位优先MSD&lt;/strong&gt;和&lt;strong&gt;最低位优先LSD&lt;/strong&gt;两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将所有待排序整数（注意，必须是非负整数）统一为位数相同的整数，位数较少的前面补零。一般用10进制，也可以用16进制甚至2进制。所以前提是能够找到最大值，得到最长的位数，设k进制下最长为位数为d。&lt;/li&gt;
&lt;li&gt;从最低位开始，依次进行一次稳定排序。这样从最低位一直到最高位排序完成以后，整个序列就变成了一个有序序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基数排序可以看作是多轮桶排序，每个数位上都进行一次桶排序。&lt;/p&gt;
&lt;p&gt;当使用2进制时， k=2 最小，位数 d 最大，时间复杂度 O(nd) 会变大，空间复杂度 O(n+k) 会变小。当用最大值作为基数时， k=maxV 最大， d=1 最小，此时时间复杂度 O(nd) 变小，但是空间复杂度 O(n+k) 会急剧增大，此时基数排序退化成了计数排序。&lt;/p&gt;
- https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E6%A1%B6%E6%8E%92%E5%BA%8F_%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F_%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/ - 2019-2021 By Jialong</description>
        </item>
    
    
    
        <item>
        <title>TCP三次握手四次挥手详解</title>
        <link>https://eternityqjl.top/posts/%E8%AE%A1%E7%BD%91tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3/</link>
        <pubDate>Thu, 09 Dec 2021 09:31:30 +0800</pubDate>
        
        <guid>https://eternityqjl.top/posts/%E8%AE%A1%E7%BD%91tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3/</guid>
        <description>Jialong&#39;s Blog https://eternityqjl.top/posts/%E8%AE%A1%E7%BD%91tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3/ -&lt;h2 id=&#34;三次握手建立连接&#34;&gt;三次握手建立连接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第一步：客户机的TCP向服务器的TCP发送连接请求报文段。该报文段的同步位&lt;strong&gt;SYN置为1&lt;/strong&gt;，同时选择一个初始序号&lt;strong&gt;seq=x&lt;/strong&gt;。SYN报文段&lt;strong&gt;不能携带数据&lt;/strong&gt;，但要&lt;strong&gt;消耗掉一个序号&lt;/strong&gt;。这是客户机进入&lt;strong&gt;SYN-SENT同步已发送&lt;/strong&gt;状态。&lt;/li&gt;
&lt;li&gt;第二步：服务器的TCP收到连接请求后，如果同意建立连接，则向客户机发回确认，并为该TCP分配缓存和变量。在确认报文段中，&lt;strong&gt;SYN和ACK都置为1&lt;/strong&gt;，确认号是&lt;strong&gt;ack=x+1&lt;/strong&gt;，同时为自己选择一个初始序号&lt;strong&gt;seq=y&lt;/strong&gt;。确认报文&lt;strong&gt;不能携带数据&lt;/strong&gt;，但也要&lt;strong&gt;消耗一个序号&lt;/strong&gt;。此时服务器进入&lt;strong&gt;SYN-RCVD同步收到&lt;/strong&gt;状态。&lt;/li&gt;
&lt;li&gt;第三步：客户机收到确认报文后，还要向服务器给出确认，并为该TCP连接&lt;strong&gt;分配缓存和变量&lt;/strong&gt;。确认报文段的&lt;strong&gt;ACK置为1&lt;/strong&gt;，确认号&lt;strong&gt;ack=y+1&lt;/strong&gt;，序号&lt;strong&gt;seq=x+1&lt;/strong&gt;.该报文段&lt;strong&gt;可以携带数据&lt;/strong&gt;，若&lt;strong&gt;不携带则不消耗序号&lt;/strong&gt;。此时TCP客户进程进入&lt;strong&gt;ESTABLISH已建立连接&lt;/strong&gt;状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三次握手的原因&#34;&gt;三次握手的原因&lt;/h3&gt;
&lt;p&gt;第一次客户端发送SYN-SENT后可能在网络中被阻塞，导致超时，客户端重新传输该报文，并与服务器建立连接，之后传输数据然后关闭连接。当被阻塞的连接到达服务器时，服务器认为这个一条新建立的连接，并向客户端发送ACK确认，但客户端将其丢弃，服务器接收不到回复，空等待，造成了资源的浪费。&lt;/p&gt;
&lt;p&gt;另一种说法：tcp三次握手只要是为了确认线路的连通，第一次客户端发送到服务端，那么服务端就可以知道客户端的发送没有问题，但客户端不知道服务器的情况，第二次服务器发送ACK给客户端，客户端收到了证明服务端的收发都没有问题的，但服务端不知道客户端的接收情况，所以第三次是客户端再回给服务器一个ACK，服务器收到后就可以确保客户端的收发没有问题。&lt;/p&gt;
&lt;h2 id=&#34;四次挥手关闭连接&#34;&gt;四次挥手关闭连接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第一步：客户端TCP发送连接释放报文段，并&lt;strong&gt;停止发送数据&lt;/strong&gt;，终止位&lt;strong&gt;FIN置为1&lt;/strong&gt;，序号&lt;strong&gt;seq=u&lt;/strong&gt;，等于之前&lt;strong&gt;已经传送的数据的最后一个字节的序号加1&lt;/strong&gt;，FIN报文段即使&lt;strong&gt;不携带数据也要消耗一个序号&lt;/strong&gt;。此时TCP客户机进入&lt;strong&gt;FIN-WAIT-1状态&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;第二步：服务器收到连接释放报文后即发出确认，确认号&lt;strong&gt;ack=u+1&lt;/strong&gt;，序号&lt;strong&gt;seq=v&lt;/strong&gt;，等于前面&lt;strong&gt;已经传输过的数据的最后一个字节的序号加1&lt;/strong&gt;。然后服务器进入&lt;strong&gt;CLOSE-WAIT状态&lt;/strong&gt;。此时从客户机到服务器的连接就释放了，TCP连接处于&lt;strong&gt;半关闭&lt;/strong&gt;状态。&lt;/li&gt;
&lt;li&gt;第三步：若服务器已经没有要向客户机发送的数据，就通知TCP释放连接，此时其发出&lt;strong&gt;FIN=1&lt;/strong&gt;的&lt;strong&gt;连接释放报文段&lt;/strong&gt;，该报文段的序号&lt;strong&gt;seq=w&lt;/strong&gt;（在半关闭的时候可能又传输了一些数据），还需重复上次已经发送的确认号&lt;strong&gt;ack=u+1&lt;/strong&gt;.此时服务器进入&lt;strong&gt;LAST-ACK状态&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;第四步：客户机收到连接释放报文段后，要发送确认。把确认报文中的&lt;strong&gt;确认位ACK置为1&lt;/strong&gt;，确认号&lt;strong&gt;ack=w+1&lt;/strong&gt;，序号&lt;strong&gt;seq=u+1&lt;/strong&gt;。此时连接还未释放，要等到计时器的设置时间**2MSL（最长报文寿命）**后客户机才进入CLOSED状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;粘包&#34;&gt;粘包&lt;/h2&gt;
&lt;p&gt;应用层一次recv接收了多个send。原因是TCP协议是面向字节流的，无法区分边界，需要应用层协议去解决。可以通过在应用层为数据流加上特定标志开头。还有就是关闭Nagle协议。&lt;/p&gt;
- https://eternityqjl.top/posts/%E8%AE%A1%E7%BD%91tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3/ - 2019-2021 By Jialong</description>
        </item>
    
    
    
        <item>
        <title>现代操作系统学习日志——进程与线程</title>
        <link>https://eternityqjl.top/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
        <pubDate>Tue, 07 Dec 2021 17:14:52 +0800</pubDate>
        
        <guid>https://eternityqjl.top/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
        <description>Jialong&#39;s Blog https://eternityqjl.top/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/ -&lt;h2 id=&#34;0-操作系统概念&#34;&gt;0. 操作系统概念&lt;/h2&gt;
&lt;h3 id=&#34;进程&#34;&gt;进程&lt;/h3&gt;
&lt;h3 id=&#34;地址空间&#34;&gt;地址空间&lt;/h3&gt;
&lt;h3 id=&#34;文件&#34;&gt;文件&lt;/h3&gt;
&lt;h3 id=&#34;输入输出&#34;&gt;输入输出&lt;/h3&gt;
&lt;h3 id=&#34;保护&#34;&gt;保护&lt;/h3&gt;
&lt;h3 id=&#34;shell&#34;&gt;shell&lt;/h3&gt;
&lt;p&gt;进程是操作系统中的最核心的概念，它是对正在运行程序的一个抽象。&lt;/p&gt;
&lt;h2 id=&#34;进程-1&#34;&gt;进程&lt;/h2&gt;
&lt;p&gt;在任何多道程序设计系统中，CPU由一个进程快速切换至另一个进程，使得每个进程各运行几十至几百毫秒。在某一瞬间，CPU只运行一个进程，但在1秒内CPU可能运行多个进程。&lt;/p&gt;
&lt;h3 id=&#34;进程模型&#34;&gt;进程模型&lt;/h3&gt;
&lt;p&gt;计算机上所有可运行的软件，通常也包括操作系统，被组织成若干顺序进程。一个进程就是一个正在执行程序的实例。&lt;/p&gt;
&lt;h3 id=&#34;进程的创建&#34;&gt;进程的创建&lt;/h3&gt;
&lt;h3 id=&#34;进程的终止&#34;&gt;进程的终止&lt;/h3&gt;
&lt;h3 id=&#34;进程的层次结构&#34;&gt;进程的层次结构&lt;/h3&gt;
&lt;p&gt;UNIX中进程和它的所有子进程及后裔共同组成一个&lt;strong&gt;进程组&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;UNIX启动时初始化自己的方式：一个称为&lt;code&gt;init&lt;/code&gt;的特殊进程出现在启动映像中，开始运行时读入一个说明终端数量的文件，接着为每个终端创建一个新进程，这些进程等待用户登陆，如果有一个用户登录成功，该登录进程就执行一个shell准备接受命令，所接受的这些命令会启动更多进程。以此类推，在整个系统中，所有进程都是属于以init为根的一棵树。&lt;/p&gt;
&lt;p&gt;Windows中没有进程层次的概念，所有进程都是&lt;strong&gt;低位相等&lt;/strong&gt;的。&lt;/p&gt;
&lt;h3 id=&#34;进程的状态&#34;&gt;进程的状态&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;运行态：该时刻进程实际占用CPU&lt;/li&gt;
&lt;li&gt;就绪态：可运行，但因为其他进程正在运行而暂时停止&lt;/li&gt;
&lt;li&gt;阻塞态：除非某种外部事件发生，否则进程不能运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程的实现&#34;&gt;进程的实现&lt;/h3&gt;
&lt;h2 id=&#34;线程&#34;&gt;线程&lt;/h2&gt;
&lt;p&gt;每个进程有一个地址空间和一个控制线程；但是，经常存在同一个地址空间中&lt;strong&gt;准并行运行&lt;/strong&gt;多个控制线程的情况，这些线程就像是分离的进程（除共享地址空间外）。&lt;/p&gt;
&lt;h3 id=&#34;线程的使用&#34;&gt;线程的使用&lt;/h3&gt;
&lt;p&gt;并行实体拥有&lt;strong&gt;共享同一个地址空间和所有可用数据&lt;/strong&gt;的能力，而多进程模型的地址空间不同。&lt;/p&gt;
&lt;p&gt;线程比进程更轻量级，更容易创建、也更容易撤销。&lt;/p&gt;
&lt;p&gt;另外如果存在大量计算和I/O处理，多个线程允许这些活动彼此重叠进行，加快执行速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字处理软件：
&lt;ul&gt;
&lt;li&gt;与用户交互线程&lt;/li&gt;
&lt;li&gt;格式处理线程&lt;/li&gt;
&lt;li&gt;处理磁盘备份线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;经典的线程模型&#34;&gt;经典的线程模型&lt;/h3&gt;
&lt;p&gt;在同一个进程中并行运行多个线程，是对在同一台计算机上并行运行多个进程的模拟。前一种情形下，多个线程共享共享&lt;strong&gt;同一地址空间和其他资源&lt;/strong&gt;，后一种情形中，多个进程共享物理内存、磁盘、打印机和其他资源。因此由于线程具有进程的某些性质，所以有时被称为轻量级进程。&lt;/p&gt;
&lt;p&gt;多线程用来描述在同一个进程中允许多个线程的情形，一些CPU已经有直接硬件支持多线程，允许线程切换在纳秒级完成。&lt;/p&gt;
&lt;p&gt;所有线程共享同一地址空间，意味着它们也共享同样的全局变量。各个线程可以访问进程地址空间中的每一个内存地址，所以一个线程可以读、写或清除另一个线程的堆栈。&lt;strong&gt;线程之间是没有保护的&lt;/strong&gt;，因为同一个进程的多个线程是为了相互合作的。除了共享地址空间，所有线程还共享同一个打开文件、子进程、定时器及相关信号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每个进程中的内容：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址空间&lt;/li&gt;
&lt;li&gt;全局变量&lt;/li&gt;
&lt;li&gt;打开文件&lt;/li&gt;
&lt;li&gt;子进程&lt;/li&gt;
&lt;li&gt;定时器&lt;/li&gt;
&lt;li&gt;信号与信号处理程序&lt;/li&gt;
&lt;li&gt;账户信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;每个线程中的内容：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序计数器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄存器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;堆栈&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和传统进程一样，线程可以处于若干种状态的任何一个：&lt;strong&gt;运行、阻塞、就绪或终止&lt;/strong&gt;。正在运行的线程&lt;strong&gt;拥有CPU并且是活跃的&lt;/strong&gt;，被阻塞线程正在等待某个释放它的事件。&lt;/p&gt;
&lt;p&gt;认识到&lt;strong&gt;每个线程有其自己的堆栈&lt;/strong&gt;很重要。每个线程的堆栈有一个帧，供各个被调用但还没有从中返回的过程使用。在该栈帧中存放了响应过程的局部变量以及过程调用完后使用的返回地址。通常每个线程会调用不同的过程，从而有一个各自不同的执行历史，因此每个线程需要有自己的堆栈。&lt;/p&gt;
&lt;p&gt;一个常见的系统调用：&lt;strong&gt;thread_yield&lt;/strong&gt;，允许线程自动放弃CPU而让另一个线程运行。这样的调用很重要，因为不同于进程，线程库无法利用时钟中断强制线程让出CPU。所以设法使线程随着事件推移自动交出CPU，并让其他线程有机会使用，就非常重要。&lt;/p&gt;
&lt;h3 id=&#34;posix线程&#34;&gt;POSIX线程&lt;/h3&gt;
&lt;p&gt;为实现可移植的线程程序，IEEE定义了线程的标准。它定义的线程包叫做&lt;strong&gt;pthread&lt;/strong&gt;。大部分UNIX系统都支持该标准，这个标准定义了超过60个函数调用。所有pthread线程都有某些特性，每一个都含有一个标识符、一组寄存器和一个存储在结构中的属性。这些属性包括堆栈大小、调度参数以及其他线程需要的项目。&lt;/p&gt;
&lt;p&gt;以下是一些线程调用举例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pthread_create：创建新线程并返回标识符，线程标识符为了让其他线程引用该线程&lt;/li&gt;
&lt;li&gt;pthread_exit：结束调用的线程&lt;/li&gt;
&lt;li&gt;pthread_join：等待一个特定线程的推出&lt;/li&gt;
&lt;li&gt;pthread_yield：释放CPU来运行另一个线程&lt;/li&gt;
&lt;li&gt;pthread_attr_init：创建并初始化一个线程的属性结构&lt;/li&gt;
&lt;li&gt;pthread_attr_destroy：删除一个线程的属性结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;在用户空间中实现线程&#34;&gt;在用户空间中实现线程&lt;/h3&gt;
&lt;p&gt;有两种主要的方法实现线程包：在用户空间中和在内核中。&lt;/p&gt;
&lt;p&gt;把整个线程包放在用户空间时，内核对线程包一无所知。从内核的角度看就相当于单线程进程。&lt;/p&gt;
&lt;p&gt;第一个优点是用户级线程包可以在不支持线程的操作系统上实现。可以用函数库实现线程。&lt;/p&gt;
&lt;p&gt;线程是在一个&lt;strong&gt;运行时系统&lt;/strong&gt;的上层运行，该运行时系统是一个管理线程的过程的集合。前面已经介绍过pthread_create、pthread_exit等过程。&lt;/p&gt;
&lt;p&gt;用户空间管理线程时，每个进程需要有其专用的&lt;strong&gt;线程表&lt;/strong&gt;，用来跟踪该进程中的线程。线程表与内核中的进程表类似，不过只记录每个线程的属性。该线程表由运行时系统管理。&lt;/p&gt;
&lt;p&gt;用户线程的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程切换要比陷入内核快一个数量级，保存线程状态的过程和调度程序都是本地过程，启动它们比进行内核调用效率高&lt;/li&gt;
&lt;li&gt;允许每个进程有自己的调度算法。同时用户级i安城具有较好的可扩展性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;如何实现阻塞系统的问题。使用线程的一个主要目的：要允许每个线程使用阻塞调用，还要避免被阻塞的线程影响其他线程。发生缺页的故障时，在对所需的指令进行定位和读入时，相关进程就被阻塞。一个线程引起页面故障时，内核由于不知道有线程存在，通常会把整个进程阻塞直到磁盘I/O完成为止，尽管其他线程可以正常运行。&lt;/p&gt;
&lt;p&gt;另一个问题是单独的一个进程内部没有时钟中断，只能等一个线程自动放弃CPU时其他线程才能使用。&lt;/p&gt;
&lt;h3 id=&#34;在内核中实现线程&#34;&gt;在内核中实现线程&lt;/h3&gt;
&lt;p&gt;此时无需运行时系统，并且每个进程中也没有线程表。在&lt;strong&gt;内核中&lt;/strong&gt;有用来记录系统中所有线程的&lt;strong&gt;线程表&lt;/strong&gt;。当某个线程希望&lt;strong&gt;创建一个新线程或撤销一个已有线程&lt;/strong&gt;时，它进行一个&lt;strong&gt;系统调用&lt;/strong&gt;，这个系统调用通过对线程表的更新完成线程创建或撤销工作。&lt;/p&gt;
&lt;p&gt;所有能阻塞线程的调用都以&lt;strong&gt;系统调用&lt;/strong&gt;的形式实现，这与运行时系统相比，&lt;strong&gt;代价十分可观&lt;/strong&gt;。当一个线程阻塞时，内核根据其选择，可以运行同一个进程中另一个线程（若有一个就绪线程）或运行另一个进程中的线程。而在用户级线程中，运行时系统始终运行自己进程中的线程，直到内核剥夺其CPU。&lt;/p&gt;
&lt;p&gt;内核线程不需要任何新的、非阻塞系统调用。如果某个进程中的线程引起了页面故障，内核可以方便地检查该进程是否有其他就绪的线程，如果有就将其运行。这样做的缺点是&lt;strong&gt;系统调用的代价较大&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;混合实现&#34;&gt;混合实现&lt;/h3&gt;
&lt;p&gt;多个内核级线程和用户级线程多路复用。一些内核级线程被多个用户级线程多路复用，如同进程的用户级线程一样。每个内核级线程有一个可以轮流使用的用户级线程的集合。&lt;/p&gt;
&lt;h3 id=&#34;调度程序激活机制&#34;&gt;调度程序激活机制&lt;/h3&gt;
&lt;p&gt;内核级线程在一些关键点上优于用户级线程，但速度远慢于用户级线程。人们设计了调度程序激活，来模拟内核线程的功能&lt;/p&gt;
&lt;h3 id=&#34;弹出式线程&#34;&gt;弹出式线程&lt;/h3&gt;
&lt;p&gt;用来处理到来的消息，例如服务请求。&lt;/p&gt;
&lt;h3 id=&#34;使单线程代码多线程化&#34;&gt;使单线程代码多线程化&lt;/h3&gt;
&lt;h2 id=&#34;进程间通信&#34;&gt;进程间通信&lt;/h2&gt;
&lt;h3 id=&#34;0-基本概念&#34;&gt;0. 基本概念&lt;/h3&gt;
&lt;p&gt;消息传递小节以前介绍的内容都是&lt;strong&gt;共享存储&lt;/strong&gt;相关的内容，主要是来实现同步和互斥机制。&lt;strong&gt;消息传递&lt;/strong&gt;是第二种通信方式，使用send和receive原语进行传递，它们是系统调用，需要进入内核态。&lt;/p&gt;
&lt;p&gt;IPC（Inter Process Communication）。以下有一些进程间通信有关的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个进程如何把&lt;strong&gt;信息传递&lt;/strong&gt;给另一个（共享存储、消息传递）&lt;/li&gt;
&lt;li&gt;确保两个或更多的进程在关键活动中&lt;strong&gt;不会出现交叉（互斥）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;正确的顺序（同步）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个问题对线程比较容易，因为它们共享同一个地址空间。另外两个问题同样适用于线程。&lt;/p&gt;
&lt;h3 id=&#34;竞争条件&#34;&gt;竞争条件&lt;/h3&gt;
&lt;p&gt;竞争条件是指两个或多个进程读写某些&lt;strong&gt;共享数据&lt;/strong&gt;，最后的结果取决于进程运行的&lt;strong&gt;精确时序&lt;/strong&gt;。多核增长带来的并行使得使得竞争条件越来越普遍。&lt;/p&gt;
&lt;h3 id=&#34;临界区&#34;&gt;临界区&lt;/h3&gt;
&lt;p&gt;涉及共享内存、共享文件及共享任何资源的情况都会引发与前面（竞争条件）类似的错误，我们要通过某种途径来阻止多个进程同时读写共享的数据，即我们需要的是&lt;strong&gt;互斥&lt;/strong&gt;。用一种手段确保当一个进程在使用共享变量或文件时，其他进程不能做同样的操作。&lt;/p&gt;
&lt;p&gt;我们把对共享内存进行访问的程序片段称为&lt;strong&gt;临界区&lt;/strong&gt;，通过适当安排，使两个进程不可能同时处于临界区中，就能避免竞争条件。&lt;/p&gt;
&lt;p&gt;这样的要求避免了竞争条件，但它不能保证使用共享数据的并发进程能够&lt;strong&gt;正确和高效地进行协作&lt;/strong&gt;。一个好的解决方案需要满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何两个进程不能同时处于临界区&lt;/li&gt;
&lt;li&gt;不应对CPU的速度和数量作任何假设&lt;/li&gt;
&lt;li&gt;临界区外运行的进程不得阻碍其他进程&lt;/li&gt;
&lt;li&gt;不得使进程无限期等待进入临界区&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;忙等待的互斥&#34;&gt;忙等待的互斥&lt;/h3&gt;
&lt;p&gt;这里将会讨论&lt;strong&gt;几种互斥方案&lt;/strong&gt;。当一个进程在临界区中更新共享内存时，其他进程将不会进入其临界区。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;屏蔽中断&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最简单的方法是每个进程刚刚进入临界区后立即屏蔽所有中断，并在离开前打开中断。&lt;/p&gt;
&lt;p&gt;这个方案并不好，把屏蔽中断的权力&lt;strong&gt;交给用户&lt;/strong&gt;是不明智的。若一个进程屏蔽中断后不再打开，系统可能终止。&lt;/p&gt;
&lt;p&gt;另一方面，对内核来说，当其在更新变量或列表的几条指令期间将中断屏蔽很方便。&lt;/p&gt;
&lt;p&gt;在多核系统中，屏蔽一个CPU中断不会阻止其他CPU干预第一个CPU所做的操作，因此我们需要更加复杂的计划。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;锁变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即408中学习的单标志法。是一种软件实现方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;严格轮换法（自旋锁）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程连续测试一个变量直到出现某个值为止，称为&lt;strong&gt;忙等待&lt;/strong&gt;，这种方式&lt;strong&gt;浪费CPU时间&lt;/strong&gt;，通常应该避免。用于忙等待的锁，称为&lt;strong&gt;自旋锁&lt;/strong&gt;。该方案要求两个进程严格地轮流进入他们的临界区，任何一个进程都不可能在一轮中打印两个文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Peterson解法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;防止两个进程进行无限等待，又设置了一个变量turn，每个变量在先设置自己的标志flag后再置turn标志。这时再同时检测另一个进程状态标志和允许进入标志，保证两个进程同时要求进入临界时只允许一个进程进入。该算法解决了饥饿现象。该算法是1和3的结合，利用flag实现临界资源的互斥访问，利用turn解决饥饿现象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TSL指令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该指令需要硬件支持。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;TSL RX, LOCK
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;称为&lt;strong&gt;测试并加锁&lt;/strong&gt;，将一个&lt;strong&gt;内存字lock&lt;/strong&gt;读到寄存器RX中，然后再在内存地址上存一个&lt;strong&gt;非零值&lt;/strong&gt;。读字和写字操作保证是不可分割的，该指令结束之前其他处理器均不允许访问该内存字。执行TSL指令的CPU将&lt;strong&gt;锁住内存总线&lt;/strong&gt;，以禁止其他CPU再本指令结束之前访问内存。&lt;/p&gt;
&lt;p&gt;为了使用TSL指令，要使用已给共享变量lock协调对共享内存的访问。当lock为0时任何进程都可以使用TSL指令将其设置为1，并读写共享内存。操作结束时，进程用一条普通move指令将lock的值重新设置为0.&lt;/p&gt;
&lt;h3 id=&#34;睡眠与唤醒&#34;&gt;睡眠与唤醒&lt;/h3&gt;
&lt;p&gt;Peterson和TSL或XCHG方法都正确，但有忙等待的缺点。&lt;/p&gt;
&lt;p&gt;现在来考虑几条&lt;strong&gt;进程间通信原语&lt;/strong&gt;，他们在无法进入临界区时将&lt;strong&gt;阻塞&lt;/strong&gt;，而不是忙等待。最简单的时sleep和wakeup。&lt;/p&gt;
&lt;h3 id=&#34;信号量&#34;&gt;信号量&lt;/h3&gt;
&lt;p&gt;semaphore。P操作和V操作。对于信号量的操作都是单一的、不可分割的&lt;strong&gt;原子操作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;用信号量问题解决生产者、消费者问题。&lt;/p&gt;
&lt;p&gt;信号量可以用来实现同步、互斥操作。详见408笔记内容。&lt;/p&gt;
&lt;h3 id=&#34;互斥量mutex锁&#34;&gt;互斥量(mutex锁)&lt;/h3&gt;
&lt;p&gt;mutex。信号量的简化版本。互斥量是一个可以处于两态之一的变量：解锁和加锁。只需要一个二进制位表示。实际上常用一个整型量，0表示解锁，其他所有制表示枷锁。&lt;/p&gt;
&lt;p&gt;互斥量使用两个过程。当一个进程或线程需要访问临界区时，调用mutex_lock，如果该互斥量当前是解锁的（临界区可用），则此调用成功，调用线程可以自由进入该区域。另外如果该互斥量已经加锁，则调用线程被阻塞，直到在临界区中的线程完成并调用mutex_unlock。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件变量与互斥量&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;管程&#34;&gt;管程&lt;/h3&gt;
&lt;p&gt;一种高级同步原语。一个管程是一个由过程、变量即数据结构组成的一个集合，共同组成一个特殊的模块或软件包。进程可以任何需要的时候调用管程中的过程，但它们不能再管程之外声明的过程中直接访问管程内的数据结构。&lt;/p&gt;
&lt;p&gt;任一时刻管程中只能有一个活跃的进程，这一特性使得管程能有效地完成互斥。&lt;/p&gt;
&lt;h3 id=&#34;消息传递&#34;&gt;消息传递&lt;/h3&gt;
&lt;p&gt;这种方法使用两条原语send和receive，它们是系统调用。&lt;/p&gt;
&lt;h2 id=&#34;调度&#34;&gt;调度&lt;/h2&gt;
&lt;p&gt;其他进程调度算法详见408相关内容。&lt;/p&gt;
&lt;h3 id=&#34;线程调度&#34;&gt;线程调度&lt;/h3&gt;
&lt;p&gt;线程调度中考虑支持的是用户级线程还是内核级线程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户级线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户级线程的调度&lt;strong&gt;由运行时系统决定&lt;/strong&gt;，一般使用轮转调度和优先级调度。局限是缺乏一个时钟中断运行过长的线程，但由于线程间的合作关系，也不算是问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内核级线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户级线程的切换只需要少量的机器指令，而内核级线程需要完整的上下文切换，修改内存映射，使高速缓存失效，导致了若干数量级的延迟。&lt;/p&gt;
&lt;p&gt;另一方面使用内核级线程时，一旦线程阻塞在I/O上就不需要像在用户级线程中那样将整个进程挂起。&lt;/p&gt;
&lt;p&gt;从进程A的一个线程切换到进程B的一个线程的代价高于运行进程A的第二个线程（必须修改内存映像，修改高速缓存的内容），内核对此是了解的，可以运用这些信息做出决定。&lt;/p&gt;
&lt;p&gt;另一个因素是用户级线程可以使用&lt;strong&gt;专为应用程序定制的线程调度程序&lt;/strong&gt;，内核线程不了解每个线程的作用，一般而言，应用定制的线程调度程序能够比内核更好地满足应用的需要。&lt;/p&gt;
&lt;h2 id=&#34;经典ipc问题&#34;&gt;经典IPC问题&lt;/h2&gt;
&lt;h3 id=&#34;哲学家就餐问题&#34;&gt;哲学家就餐问题&lt;/h3&gt;
&lt;h3 id=&#34;读者-写者问题&#34;&gt;读者-写者问题&lt;/h3&gt;
- https://eternityqjl.top/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/ - 2019-2021 By Jialong</description>
        </item>
    
    
  </channel>
</rss> 