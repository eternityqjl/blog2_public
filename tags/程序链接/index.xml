<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序链接 on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/tags/%E7%A8%8B%E5%BA%8F%E9%93%BE%E6%8E%A5/</link>
    <description>Recent content in 程序链接 on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Sat, 11 Dec 2021 21:38:11 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/tags/%E7%A8%8B%E5%BA%8F%E9%93%BE%E6%8E%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Csapp：7.链接</title>
      <link>https://eternityqjl.top/posts/csapp-7-%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Sat, 11 Dec 2021 21:38:11 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/csapp-7-%E9%93%BE%E6%8E%A5/</guid>
      <description>链接是将各种代码和数据片段收集并组合成一个单一文件的过程，这个文件可以被加载到内存并执行。
链接可以执行于编译时、加载时、运行时。
链接使得分离编译成为可能。可以将巨大的源文件分解为更小的模块，可以独立地修改和编译这些模块。当我们改变其中的一个模块时，只需简单地将其重新编译并链接，无需重新编译其他文件。
理解链接器的作用：
 帮助构造大型程序 避免一些危险的编程错误。例如错误地定义多个全局变量的程序将通过链接器，不产生任何警告。 理解语言的作用域规则。如：全局和局部变量的区别；static属性的变量和函数的意义。 帮助理解其他重要的系统概念。链接器产生的可执行目标文件在重要的系统功能中扮演着关键角色。 帮助我们利用共享库。  编译器驱动程序 编译器驱动程序代表用户在需要时调用语言预处理器、编译器、汇编器和链接器。例如我们经常使用的gcc驱动程序。
main.c$\rightarrow$main.i$\rightarrow$main.s$\rightarrow$main.o$\rightarrow$prog
源程序$\rightarrow$中间文件$\rightarrow$汇编语言文件$\rightarrow$可重定位目标文件$\rightarrow$可执行目标文件
依次使用了：预处理器、编译器、汇编器 、链接器
shell执行可执行文件时调用操作系统中的加载器函数，将prog中的代码和数据复制到内存中，然后将控制转移到这个程序的开头。
linux&amp;gt; ./prog 静态链接 可重定位目标文件由不同的代码和数据节组成，每一节都是一个连续的字节序列。
静态链接器以一组可重定位目标文件和命令行参数作为输入，生成一个完全链接的、可以加载和运行的可执行目标文件作为输出。
为了构造可执行文件，链接器必须完成连个任务：
 符号解析：目标文件定义和引用符号，每个符号对应一个函数、一个全局变量或一个静态变量。将每个符号引用正好和一个符号定义关联起来。（每个符号对应于一个函数、一个全局变量或一个静态变量） 重定位。编译器和汇编器生成从地址0开始的代码和数据节。链接器通过把每个符号定义与一个内存位置关联起来，从而重定位这些节，然后修改所有对这些符号的引用，使它们指向这个内存位置。  目标文件 共有三种：
 可重定位目标文件：二进制代码和数据，可在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。 可执行目标文件：二进制代码和数据，其形式可以直接被复制到内存中并执行。 共享目标文件：特殊类型的可重定位目标文件，可以在加载或运行时被动态地加载进内存并链接。  目标文件是按照特定目标文件格式来组织的，各个系统的目标文件格式都不相同。
可重定位目标文件 一个典型的ELF可重定位目标文件：
首先是16B的ELF头，描述了生成该文件的系统的字的大小和字节顺序。
然后是节：一个典型的ELF可重定位目标文件包含以下几个节：
 .text：已编译程序的机器代码 .rodata：只读数据 .data：已初始化的全局和静态C变量 .bss：未初始化的全局和静态C变量，以及所有被初始化为0的全局或静态变量 .symtab：一个符号表，存放在程序中定义和引用的函数和全局变量的信息 .rel.text .rel.data .debug：调试符号表，以-g选项调用编译器驱动程序时才会得到这张表。 .line：原始C程序的行号和.text节中的机器指令之间的映射，以-g选项调用编译器驱动程序时才会得到这张表。 .strtab：一个字符串表，其中内容包括.symtab和.debug节中的符号表，以及节头部中的节名称。  符号和符号表 每个可重定位目标模块都有一个符号表.symtab，它包含m定义和引用的符号的信息。在链接器的上下文，有三种不同符号：
 由模块m定义并能被其他模块引用的全局符号：对应非静态的C函数和全局变量。 由其他模块定义并被m引用的全局符号，称为外部符号：对应其他模块中定义的非静态的C函数和全局变量 只被模块m定义和引用的局部符号：对应于带static属性的C函数和全局变量。  本地非静态程序变量的符号在运行时在栈中被管理，不在符号表.symtab中。
C中源文件扮演模块的角色，static属性就像C++使用的public和private一样。
尽可能用static属性来保护变量和函数。
符号表由汇编器构造，使用编译器输出到汇编语言.s文件中的符号。.symtab节中包含ELF符号表。以下为符号表中每个符号条目的格式：
typedef struct { int name; char type:4, binding:4; char reserved; short section; long value; long size; } Elf64_Symbol; name是字符串表中的字节偏移，指向符号的以null结尾的字符串名字。value是符号的地址。对于可重定位目标文件来说，value是距定义目标的节的起始位置的偏移。对于可执行目标文件来说，该值是一个绝对运行时的地址。size是目标的大小。type通常代表数据或函数。符号表还可以包含各个节的条目。binging字段表示符号是本地还是全局。</description>
    </item>
    
  </channel>
</rss>
