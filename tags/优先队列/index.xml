<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>优先队列 on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</link>
    <description>Recent content in 优先队列 on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Mon, 06 Dec 2021 14:26:53 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法——堆排序和优先队列</title>
      <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E5%A0%86%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 06 Dec 2021 14:26:53 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E5%A0%86%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</guid>
      <description>优先队列 优先队列如同其字面意思，是一种支持删除最大元素和插入元素的一种数据结构。
二叉堆是一棵有序的完全二叉树，可以很好地实现优先队列。使用二叉堆实现优先队列可以保证插入元素和删除最大元素的操作在$\log N$的时间内完成。
我们通常使用数组来实现二叉堆。
堆 堆的有序化 sink——自上而下的有序化
void sink(vector&amp;lt;int&amp;gt;&amp;amp; nums, int i, int heapSize) {	//i为数组下标  while (2i &amp;lt; heapSize) { int j = 2i; if (j &amp;lt; heapSize - 1 &amp;amp;&amp;amp; nums[j] &amp;lt; nums[j+1])	j++; if (!(nums[i] &amp;lt; nums[j]))	break; swap(nums[i], nums[j]); i = j; } } swim——自下而上的有序化
void swim(vector&amp;lt;int&amp;gt;&amp;amp; nums, int x) {//x为插入末尾的元素  nums.push_back(x); int k = nums.size() - 1; while (k &amp;gt; 0 &amp;amp;&amp;amp; nums[k/2] &amp;lt; nums[k]) { swap(nums[k/2], nums[k]); k = k/2; } } 构建大根堆 void buildMaxHeap(vector&amp;lt;int&amp;gt;&amp;amp; nums) {	//使用sink从上向下构建大根堆  int heapSize = nums.</description>
    </item>
    
  </channel>
</rss>
