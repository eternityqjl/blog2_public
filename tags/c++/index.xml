<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Fri, 03 Dec 2021 11:21:29 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; Primer——CH18 用于大型工程的工具——命名空间</title>
      <link>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE9%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Fri, 03 Dec 2021 11:21:29 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE9%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid>
      <description>命名空间 大型程序往往使用多个独立开发的库，这些库又会定义大量全局名字，如类、函数、模板。当应用程序使用到多个供应商提供的库时，不可避免会发生某些名字的冲突。多个库名字放置在全局命名空间中会引发命名空间污染。
命名空间提供了防止污染的可控机制。命名空间分隔了全局命名空间，每个命名空间是一个作用域。通过某个命名空间定义库名，可以避免全局名字固有的限制。
定义命名空间 命名空间既可以定义在全局作用域中，也可以定义在其他命名空间中，但不能定义在函数或类的内部。
每个命名空间都是一个作用域
位于该命名空间之外的代码必须明确指出所用的名字属于哪个命名空间。
命名空间可以是不连续的
namespace nsp { //相关声明 } 可能定义了一个新命名空间，可以能为已存在的命名空间添加一些新成员。
因此我们可以将几个独立的接口和实现文件组成一个命名空间。其组织方式类似于我们管理自定义类及函数的方式：
 命名空间中是定义类、声明作为类接口的函数及对象的部分，放置于头文件中，然后将这些头文件包含在使用了这些成员的文件中 命名空间成员的定义部分则置于另外的源文件中  程序中某些实体只能定义一次，如内联函数、变量等。命名空间中的定义也要满足这一要求。即接口与实现分离的机制。
另外，我们不把#include放在命名空间内部。这样做的隐含意思是把头文件中所有名字定义成该命名空间的成员，这很有可能导致错误，例如可能将std命名空间嵌套在自己的命名空间内。
定义命名空间成员
命名空间中的名字可以直接使用名字，此时无需前缀。
另外也可以将命名空间的外部定义该命名空间的成员，需要有完整的前缀。命名空间对于名字的声明必须在作用域内，同时改名字的定义需要明确指出其所属的命名空间。
namespace cpp_primer { std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; in, Sales_data&amp;amp; s) {} } 模板特例化
模板特例化必须定义在原始模板所属的命名空间中。只要我们在命名空间中声明了特例化，就能在命名空间外部定义它：
namespace std { template &amp;lt;&amp;gt; struct hash&amp;lt;Sales_data&amp;gt;; } template &amp;lt;&amp;gt; struct std::hash&amp;lt;Sales_data&amp;gt; { .... } 全局命名空间
全局作用域中定义的名字即定义在全局命名空间中。全局命名空间以隐式的方式声明，并且在所有程序中都存在。全局作用域中定义的名字被隐式地添加到全局命名空间中。
作用域运算符同样可以用于全局作用域成员：(因为其是隐式地，所以没有名字)
::nember_name 内联命名空间
C++ 11引入的新的嵌套命名空间，称为内联命名空间。内联命名空间中的名字可以被外层命名空间直接使用。即无需在内联命名空间的名字前添加表示该命名空间的前缀。
inline namespace FifthEd { } namespace FifthEd { ... } 关键字inline必须出现在命名空间第一次定义的地方，后续再打开时可以不写inline。
当应用程序的代码在一次发布和另一次发布之间发生了改变时，常常用到内联命名空间。我们可以将当前版本的所有代码都放在一个内联命名空间中，把之前版本的代码都放在一个非内联命名空间中。这样在使用时，使用当前版本的成员的代码无需加前缀，如需使用之前版本的代码，则需加上完整的外层命名空间名字。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Primer——CH15 面向对象程序设计</title>
      <link>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 03 Dec 2021 11:10:28 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>面向对象程序设计基于三个基本概念：数据抽象、继承和动态绑定。
本章介绍剩余的继承和动态绑定。通过这两种特性我们可以更容易地定义与其他类相似但不完全相同的新类；另外在使用这些彼此相似的类编写函数时。我们可以在一定程度上忽略掉它们的区别。
OOP：概述 继承 通过继承联系在一起的类构成了一种层次关系。通常在层次关系的根部有一个基类，其他类别从基类继承而来，这些继承而来的类称为派生类。基类负责定义所有类共同拥有的成员，而每个派生类定义各自特有的成员。
对于某些函数，基类希望它的派生类各自定义适合自己的版本，此时基类就将这些函数声明成虚函数：
class Quote { public: std::string isbn() const; virtual double net_price(std::size_t n)	const; }; 派生类必须通过使用类派生列表明确指出它是从哪个基类继承而来的。
类派生列表的形式：首先是一个冒号，后面紧跟以逗号分隔的基类列表，每个基类列表前面可以有访问说明符：
class Bulk_quote : public Quote { public: double net_price(std::size_t n)	const override; } 完全可以把Bulk_quote的对象当作Quote的对象来使用。
派生类必须在其内部对所有重新定义的虚函数进行声明。C++11 允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，方法是在该函数的形参列表之后增加一个override关键字。
动态绑定 又称为运行时绑定，根据运行时传入的实参选择函数的版本。通过动态绑定，我们可以用同一段代码分别处理Quote和Bulk_quote的对象。
定义基类和派生类 定义基类 继承关系中的根节点的类通常会定义一个虚析构函数。
对于一些操作，派生类需要提供自己的新定义以覆盖（override）从基类继承而来的就定义。需要覆盖的函数，基类通常将其定义为虚函数。
成员函数如果没有被声明为虚函数，则其解析过程发生在编译时而非运行时。
任何构造函数之外的非静态函数都可以是虚函数。virtual只能出现在类内部的声明语句。
访问控制与继承
一般情况下派生类可以继承定义在基类中的成员，但派生类的成员函数没有权限访问从基类继承而来的成员，派生类只能访问公有成员，不能访问私有成员。而有一种成员，基类希望它的派生类有权限访问该成员，同时禁止其他用户访问，我们使用受保护的（protected）访问运算符说明该成员。
定义派生类 派生类必须通过使用类派生列表明确指出从哪个（哪些）基类继承而来的。
类派生列表的形式：冒号后紧跟以逗号分隔的基类列表，每个基类前面可以有三个访问说明符中的一个：public、protected或private。
class Bulk_quote : public Quote {	//Bulk_quote继承自Quote  }; 访问说明符的作用是控制派生类从基类继承而来的成员是否对派生类的用户可见。
如果一个派生是公有的，则基类的公有成员也是派生类接口的组成部分；此外还能将公有派生类型的对象绑定到基类的引用或指针上。
Quote item;	//基类对象 Bulk_quote bulk;	//派生类对象 Quote *p = &amp;amp;item;	//p指向Quote对象 p = &amp;amp;bulk;	//p指向bulk的Quote部分 Quote &amp;amp;r = bulk;	//r绑定到bulk的Quote部分 派生类可以在它覆盖的函数前使用virtual关键字，但不是非得这样做。</description>
    </item>
    
    <item>
      <title>Cpp程序的内存分配</title>
      <link>https://eternityqjl.top/posts/cpp%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Thu, 02 Dec 2021 21:54:01 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>栈stack &amp;amp; 堆heap  栈区stack：由编译器自动分配和释放，用来存放函数的参数值、局部变量的值。按内存地址由高往低方向生长，其最大大小由编译时确定，速度快，但自由性差，最大空间不大。 堆区heap：一般由程序员分配和释放，用来创建动态内存。按内存地址由低到高方向生长，其大小由系统内存/虚拟内存上限决定，速度较慢，但自由性大，可用空间大。  .data &amp;amp; .bss &amp;amp; .text  全局区.data(gvar)：程序中已经初始化的非零全局变量、静态变量，程序结束后由系统释放 .bss：存放程序中未初始化的全局变量和静态变量，以及所有被初始化为0的全局或静态变量。目标文件中这个节不占据实际空间，仅仅是一个占位符。 程序代码区.text：存放已编译程序的机器代码  text和data节都在可执行文件中，.bss不在可执行目标文件中，由系统自动生成。
宏定义不占用内存和编译时间。
new与malloc的区别 malloc是面向内存的，想要多大内存就分配多大。而new是面向对象的，根据执行的对象类型来申请空间，并能够内部调用构造函数生成对象。</description>
    </item>
    
    <item>
      <title>typedef和define宏详解</title>
      <link>https://eternityqjl.top/posts/cpp_typedef%E5%92%8Cdefine%E5%AE%8F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Dec 2021 19:43:11 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp_typedef%E5%92%8Cdefine%E5%AE%8F%E8%AF%A6%E8%A7%A3/</guid>
      <description>typedef是定义了一种类型的新别名，不同于宏，它不是简单的字符串替换。
当const和typedef一起出现时，typedef不会是简单的字符串替换就行。
typedef常用来定义一个标识符及关键字的别名，它是语言编译过程的一部分，但它并不实际分配内存空间
#define为一宏定义语句，通常用它来定义常量(包括无参量与带参量)，以及用来实现那些“表面似和善、背后一长串”的宏，它本身并不在编译过程中进行，而是在这之前(预处理过程)就已经完成了，但也因此难以发现潜在的错误及其它代码维护问题
#define用法详解 无参宏定义 #define 标识符 字符串 预处理命令。
有参宏定义 #define 宏名(形参表) 字符串 宏定义中称为形参，宏调用中称为实参。带参数的宏，在调用中，不仅要宏展开，而且要用实参去代换形参。
宏定义中的特殊操作符 （1）#
希望在字符串中包含宏参数时使用，#作为一个预处理运算符，可以把语言符号转换为字符串，例如：
#define NUM(x) printf(&amp;#34;the number is #x.\n&amp;#34;, x) （2）##
##可以把两个字符串转换成单个字符串。
#define XNAME(n) x##n int XNAME(1) = 12;	//相当于int x1 = 12; （3）可变宏 &amp;hellip;
若要使用可变参数宏，可以在宏定义中将省略号指定为最后一个形参，并且替换标识符可以在定义中用于插入 __VA_ARGS__ 额外的参数。 __VA_ARGS__ 替换为与省略号匹配的所有参数，包括它们之间的逗号。
// variadic_macros.cpp #include &amp;lt;stdio.h&amp;gt;#define EMPTY  #define CHECK1(x, ...) if (!(x)) { printf(__VA_ARGS__); } #define CHECK2(x, ...) if ((x)) { printf(__VA_ARGS__); } #define CHECK3(...) { printf(__VA_ARGS__); } #define MACRO(s, .</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Primer——CH12 动态内存</title>
      <link>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE7%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</link>
      <pubDate>Thu, 18 Nov 2021 09:20:28 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE7%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</guid>
      <description>C++支持动态分配对象，动态分配的对象的生存期与它们在哪里创建无关，只有当显示地被释放时，这些对象才会销毁。
静态内存用来保存局部static对象、类static数据成员以及定义在任何函数之外的变量。栈内存用来保存定义在函数内的非static对象。分配在静态或栈内存中的对象由编译器自动创建和销毁。
除了静态内存和栈内存，每个程序还拥有一个内存池，这部分内存被称为堆，程序用堆来存储动态分配的对象，即那些在程序运行时分配的对象。动态对象的生存期由程序来控制，即动态对象不再使用时，我们的代码必须显示销毁它们。
动态内存与智能指针 动态内存的管理是通过new和delete完成的。new为对象分配空间并返回一个指向该对象的指针，delete接受一个动态对象的指针，销毁该对象，并释放与之关联的内存。
新的标准库提供了两种智能指针类型来管理动态对象，这两种智能指针的区别在于管理底层指针的方式：
shared_ptr允许多个指针指向同一个对象；unique_ptr独占所指向的对象。标准库还顶一个名为weak_ptr的伴随类，是一种弱引用，指向shared_ptr所管理的对象。
shared_ptr类 类似于vector，智能指针也是模板，当我们创建一个智能指针时，必须提供额外信息——指针可以指向的类型。
shared_ptr&amp;lt;string&amp;gt; p1;	//可以指向string shared_ptr&amp;lt;list&amp;lt;int&amp;gt;&amp;gt; p2;	//可以指向int的list 默认初始化的智能指针中保存着一个空指针。使用方法与普通指针类似，解引用一个智能指针返回它指向的对象。
make_shared函数 是最安全的用来分配和使用动态内存的标准库函数。
此函数在动态内存中分配一个对象并初始化它，返回指向此对象的shared_ptr。
shared_ptr&amp;lt;int&amp;gt; p3 = make_shared&amp;lt;int&amp;gt;(42); //指向一个值为42的int的shared_ptr 使用make_shared时要指定创建对象的类型，方法与定义模板类相同，在函数名后跟一个尖括号，在其中给出类型，如上所示。另外，make_shared用其参数来构造给定类型的对象。例如调用make_shared&amp;lt;string&amp;gt;时传递参数必须与string的某个构造函数匹配。
一般使用auto来定义一个对象来保存make_shared的结果：
auto p6 = make_shared&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt;(); shared_ptr的拷贝和赋值
每个shared_ptr都会记录指向相同对象的其他shared_ptr的数量。
每个shared_ptr都有一个关联的计数器，称其为引用计数。无论何时拷贝一个shared_ptr，计数器都会递增。
当我们给shared_ptr赋予一个新值或shared_ptr被销毁时，计数器就会递减。
一旦一个shared_ptr的计数器变为0，它就会释放自己所管理的对象：
auto r = make_shared&amp;lt;int&amp;gt;(42); r = q;	//给r赋值，令它指向另一个地址；递增q指向的对象的引用次数；递减r原来指向对象的引用次数；r原来指向的对象已经没有引用者，会自动释放 shared_ptr自动销毁所管理的对象
当指向一个对象的最后一个shared_ptr被销毁时，shared_ptr类会自动销毁此对象。这是通过另一个特殊成员函数——析构函数完成的。析构函数一般用来释放对象多分配的资源。
shared_ptr的析构函数会递减它所指向对象的引用次数，引用次数变为0后shared_ptr的析构函数就会自动销毁对象并释放内存。
由于最后一个shared_ptr销毁前内存都不会释放，保证shared_ptr在无用之后不再保留就非常重用，否则程序虽然会正常执行，但会浪费内存。
使用动态内存的原因
 程序不知道自己需要使用多少对象（容器类就是出于这种原因从而使用动态内存） 程序不知道对象的准确类型 程序需要在多个对象间共享数据  直接管理内存 使用运算符new分配内存，delete释放new分配的内存
使用new动态分配和初始化对象
在自由空间分配的内存是无名的，因此new无法为其分配的对象命名，而是返回一个指向该对象的指针：
int *pi = new int;	//pi指向一个动态分配的、未初始化的无名对象 默认情况下动态分配的对象是默认初始化的，这意味着内置类型或组合类型的对象的值将是未定义的。类类型对象将用默认构造函数进行初始化：
string *ps = new string;	//初始化为空string int *pi = new int;	//pi指向一个未初始化的int auto p1 = new auto(obj); 可以通过括号包围的初始化器判断我们想到分配的对象类型，然后使用auto。但只有括号内仅有单一初始化器时才能使用auto。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Primer——CH11 关联容器</title>
      <link>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE3%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 15 Nov 2021 15:32:41 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE3%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</guid>
      <description>键值对。
set和map
使用关联容器  map： 关联数组，关键字——值。 set：关键字的简单集合  可以进行列表初始化
关联容器概述 关联容器不支持顺序容器的位置相关的操作，例如push_front，原因是关联容器中的值是按照关键字存储的，这些操作没有意义。
另外无序容器还提供调整哈希性能的操作。
定义关联容器 map&amp;lt;string, size_t&amp;gt; word_count;	//空容器 set&amp;lt;string&amp;gt; exclude = {&amp;#34;the&amp;#34;, &amp;#34;but&amp;#34;, &amp;#34;and&amp;#34;}; map&amp;lt;string, size_t&amp;gt; authors = {{&amp;#34;Joyce&amp;#34;, &amp;#34;James&amp;#34;}, {&amp;#34;Austen&amp;#34;, &amp;#34;Jane&amp;#34;}}; 初始化一个map时必须提供关键字类型和值类型。
关键字类型的要求 对于有序容器map、set、multimap、multiset，关键字类型必须定义元素比较的方法。所提供的操作必须在关键字类型上定义一个严格弱序。
pair类型 定义在头文件utility中。
pair的默认构造函数对数据成员进行值初始化。也可以为每个成员提供初始化器。
pair&amp;lt;string, string&amp;gt; anon; pair&amp;lt;string, string&amp;gt; author{&amp;#34;James&amp;#34;, &amp;#34;Joyce&amp;#34;}; pair的数据成员是public的，两个成员分别命名为first和second，可以用普通的成员访问符号来访问它们。
cout &amp;lt;&amp;lt; w.first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; w.second &amp;lt;&amp;lt; endl; 关联容器操作 除了之前在顺序容器P295页列出的类型，关联容器还定义了以下类型：
 key_type：此容器类型的关键字类型 mapped_type：每个关键字关联的类型，只适用于map value_type  对于set而言，与key_type相同 对于map而言，为pair&amp;lt;const key_type, mapped_type&amp;gt;    我们使用作用域运算符来提取一个类型的成员，例如：map&amp;lt;string, int&amp;gt;::key_value.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Primer——CH10 泛型算法</title>
      <link>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE6%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 18 Jul 2021 09:16:32 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE6%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</guid>
      <description>用来操纵容器。泛型算法独立于任何特定容器，可用于不同类型的容器和不同类型的元素。这些算法是一些经典算法的公共接口，例如排序和搜索。
概述 大多数算法定义在algorithm头文件中，标准库还在numeric中定义了一组数值泛型算法。
一般这些算法并不直接操作容器，而是遍历由两个迭代器指定的一个元素范围来进行操作。
算法不依赖于容器，但依赖于元素类型的操作。
基本算法 只读算法 只读取输入范围的元素，不改变元素。
accumulate算法：
其定义在头文件numeric中，接受三个参数，前两个指出了需要求和元素的范围，第三个参数是和的初值。
int sum = accumulate(vec.cbegin(), vec.cend(), 0);	//对vec中元素求和，和的初值设为0 第三个参数的类型决定了函数中使用哪个加法运算符以及返回值的类型。
即序列中的元素必须与第三个参数匹配或能够转换为第三个参数的类型。
equal算法
确定两个序列的值是否保存相同的值，将第一个序列的每个元素与第二个序列的对应元素比较。该算法接受三个迭代器，前两个表示第一个序列的范围，第三个表示第二个序列的首元素。
equal利用迭代器完成操作，因此我们可以调用equal来比较两个不同类型容器中的元素，并且元素类型也可以不同。
写容器元素算法 使用这类算法要保证序列原大小不小于算法写入的元素数目。
fill算法
fill接受一对迭代器和一个值，将这个值赋予输入序列中的每个元素。
fill(vec.begin(), vec.end(), 0); 不能在空容器上调用fill_n.
back_inserter插入迭代器
接受一个指向容器的引用，返回一个与该容器绑定的插入迭代器。通过此迭代器赋值时，赋值运算符会调用push_back将一个具有给定值的元素添加到容器中。
back_inserter是一个定义在头文件iterator中的函数。
vector&amp;lt;int&amp;gt; vec;	//空vector auto it = back_inserter(vec);	//通过其赋值将元素添加到vec中 *it = 42; 拷贝算法
copy是另一个向目的位置迭代器指向的输出序列中的元素写入数据的算法。
该算法接受三个迭代器，前两个表示一个输入范围，第三个表示目的序列的起始位置。
重排容器元素算法 sort、unique函数
void elimDups(vector&amp;lt;string&amp;gt; &amp;amp;words) { //按字典排序words, 以便查找重复单词 	sort(words.begin(), words.end()); //unique重排输入范围，使每个单词只出现一次 	auto end_unique = unique(words.begin(), words.end()); //使用erase操作删除重复单词 	words.erase(end_unique, words.end()); } sort算法接受两个迭代器，表示要排序的元素范围。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Primer——CH09 顺序容器</title>
      <link>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE4%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Tue, 15 Jun 2021 15:36:20 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE4%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</guid>
      <description>顺序容器
一个容器就是一些特定类型对象的集合。
顺序容器提供了控制元素存储和访问顺序的能力。这种顺序与元素加入容器时的位置相对应。
关联容器与顺序容器有着根本不同，关联容器中的元素是按照关键词来保存和访问的，即Key-Value；与之相对的是顺序容器中的元素按照它们在容器中的位置来顺序保存和访问。
概述 顺序容器都提供了快速顺序访问元素的能力。
   符号 顺序容器类型(名称) 性能     vector 可变大小数组 支持快速随机访问。在尾部之外的位置插入删除元素很慢   deque 双端队列 支持快速随机访问。在头尾插入删除速度很快   list 双向链表 只支持双向顺序访问。在list中任何位置插入删除元素都很快   forward_list 单项链表 只支持单项顺序访问。在forward_list中任何位置插入删除元素都很快   array 固定大小数组 支持快速随机访问。不能添加删除元素   string 与vector相似的容器，专门用于保存字符 随机访问快，在尾部插入删除速度快    除了固定大小的array外，其他容器都提供高效的内存管理。容器保存元素的策略对容器操作的效率有着很大影响。
string和vector将元素保存在连续的内存空间中，因此由元素的下标来计算其地址非常快速。但在这两种容器的中间位置插入和删除元素的速度非常慢，因为一次插入或删除后，需要移动插入、删除位置后的所有元素以保证存储的连续。
list和forward_list两个容器能令任何位置的添加和删除操作都很快，但这两种容器不支持随机访问，因为元素保存的内存空间不连续，只能通过遍历整个容器来访问一个元素。与vector和string相比，额外内存开销也很大。
forward_list与最好的手写单向链表数据结构性能相当，因此没有size操作，因为保存或计算大小会多出额外开销。
deque支持快读随机访问，在该容器中间位置添加或删除元素速度很慢，但在两端很快。
容器库概览 容器类型上的操作分成了层次：
 某些操作式所有容器都提供的； 另外一些操作仅针对顺序容器、关联容器或无序容器； 还有一些操作只适合一小部分容器。  容器通过尖括号指定类型。
容器操作 iterator size_type 迭代器 *iter	//返回迭代器iter所指元素的引用 iter-&amp;gt;name	//解引用iter并获取该元素的名为mem的成员 ++iter	//令iter指示容器中的下一个元素 --iter	//令iter指示容器中的上一个元素 iter1 == iter2 一个迭代器范围由一对迭代器表示，这两个迭代器被称为begin和end，begin指向容器第一个元素，end指向容器的尾后元素，这种元素范围被称为左闭合区间，即[begin, end)。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Primer——CH08 IO库</title>
      <link>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE2io%E5%BA%93/</link>
      <pubDate>Mon, 10 May 2021 21:04:06 +0000</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE2io%E5%BA%93/</guid>
      <description>&lt;h2 id=&#34;io库&#34;&gt;IO库&lt;/h2&gt;
&lt;h3 id=&#34;io类&#34;&gt;IO类&lt;/h3&gt;
&lt;p&gt;为了支持不同类型的IO操作，除了iostream外，标准库还定义了其他一些IO类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件iostream：
&lt;ul&gt;
&lt;li&gt;istream, wistream类型，从流读取数据&lt;/li&gt;
&lt;li&gt;ostream, wostream类型，向流写入数据&lt;/li&gt;
&lt;li&gt;iostream, wiostream类型，读写流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;头文件fstream：
&lt;ul&gt;
&lt;li&gt;ifstream类型，从文件读取数据&lt;/li&gt;
&lt;li&gt;ofstream类型，向文件写入数据&lt;/li&gt;
&lt;li&gt;fstream类型，读写文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;头文件sstream
&lt;ul&gt;
&lt;li&gt;istringstream类型：从string读取数据&lt;/li&gt;
&lt;li&gt;ostringstream类型：向string写入数据&lt;/li&gt;
&lt;li&gt;stringstream类型：读写string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类型前加一个w的类型是为了支持宽字符，用来操纵wchart_t类型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Primer——CH07 类</title>
      <link>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE5%E7%B1%BB/</link>
      <pubDate>Tue, 27 Apr 2021 10:08:56 +0000</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE5%E7%B1%BB/</guid>
      <description>以一个例子来说明类
strut Sales_data { public: //构造函数 	Sales_data() = default; Sales_data(const std::string &amp;amp;s) : bookNo(s) {} Sales_data(const std::string &amp;amp;s, unsigned n, double p): bookNo(s), units_sold(n), revenue(p*n) {} Sales_data(std::istream &amp;amp;); //成员函数： 	std::string isbn()	const {return bookNo; } Sales_data&amp;amp; combine(const Sales_data&amp;amp;); private: double avg_price() const; std::string bookNo; //类内初始值(数据成员) 	unsigned units_sold = 0; double revenue = 0.0; }; //在类的外部定义成员函数 double Sales_data::avg_price() const { if (units_sold) return revenue / units_sold; else return 0; } //在类的外部定义构造函数 Sales_data::Sales_data(std::istream &amp;amp;is) { read(is, *this);	//从is中读取一条信息然后存入this对象中 } 成员函数 成员函数的声明必须在类的内部，它的定义既可以在类的内部也可以在类的外部。作为接口的非成员函数，它的定义和声明都在类的外部。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Primer——CH01-06 基础内容</title>
      <link>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE1%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/</link>
      <pubDate>Sun, 25 Apr 2021 10:08:56 +0000</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E5%9B%9E%E9%A1%BE1%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/</guid>
      <description>第1部分：C++基础
这个分类的博客主要为了记录一下我在学习C++过程中记录的知识笔记，主要参考自《C++ Primer 第5版》。
第一部分基础部分主要包含以下内容：
 变量和基本类型 表达式 语句 函数  变量和基本类型 变量 变量的声明和定义：
显示声明时在变量前加上extern。
声明只规定了变量类型和名字，定义还申请了存储空间，为变量赋一个初始值。
可以在多个文件重复声明，但只能定义一次。
复合类型 引用
左值引用，为对象起了另一个名字；将声明符写成&amp;amp;d的形式来定义引用类型。
int ival = 1024; int &amp;amp;refVal = ival; int &amp;amp;refVal2; 引用即为对象的别名，引用本身不是一个对象，只是为一个已存在的对象起的另一个名字。
指针
指针本身就是一个对象，允许对指针赋值和拷贝，无需再定义时赋值，定义指针时将声明符写作*d形式，d为变量名。
double dp, *dp2; //dp2为指向double类型对象的指针 取地址符&amp;amp;：
int ival = 42; int *p = &amp;amp;ival;//p存放ival的地址 解引用符*：
int ival = 42; int *p = &amp;amp;ival;//p存放ival的地址 cout &amp;lt;&amp;lt; *p;	//输出指针p所指的对象，42 空指针：不指向任何对象，使用字面值nullptr来初始化指针。
给指针赋值：令他存放一个新的地址，从而指向一个新的对象。
void*指针：一种特殊类型的指针，可用于存放任意对象的地址。
复合类型的声明：
变量的定义包含一个基本数据类型和一组声明符；同一条定义中，基本数据类型只有一个，但声明符的形式可以不同，即一条语句可以定义不同类型的变量：
int i = 1024, *p = &amp;amp;i, &amp;amp;r = i; //i是一个int数，p是一个int类型指针，r是一个int类型引用 一般把修饰符(&amp;amp;,*)和变量标识符写在一起。</description>
    </item>
    
  </channel>
</rss>
