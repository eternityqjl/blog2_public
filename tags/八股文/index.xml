<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>八股文 on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/tags/%E5%85%AB%E8%82%A1%E6%96%87/</link>
    <description>Recent content in 八股文 on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Sat, 08 Jan 2022 22:13:05 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/tags/%E5%85%AB%E8%82%A1%E6%96%87/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>八股文——操作系统相关</title>
      <link>https://eternityqjl.top/posts/%E5%85%AB%E8%82%A1%E6%96%87%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 08 Jan 2022 22:13:05 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E5%85%AB%E8%82%A1%E6%96%87%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/</guid>
      <description>进程和线程的区别   进程是资源（CPU、内存等）分配的基本单位
  线程是进程的一个实体，是CPU调度和分配的基本单位（程序执行的最小单位）。线程自身不拥有系统资源，但可与同属一个进程的其他线程共享进程所拥有的全部资源。
  进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响；线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程崩溃就等于整个进程崩溃，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。
  进程同步（通信）方法  管道：一个进程链接数据流到另一个进程，就是把一个进程的输出直接传递给另一个进程的输入。  无名管道适用于父子进程间的通信 管道是基于字节流的 半双工，数据同一时间只能从一个方向传输 自带同步机制，在保证数据安全前提下，按照特定顺序访问临界资源   信号：处理异步事件的方式，用于接收通知进程有某种事情发生，也可发送信号给进程本身。 信号量  处理进程间同步和互斥的通信机制，类似于资源计数器，保证任意时刻只有一个进程访问代码的临界区。临界期指执行数据更新的代码需要独占式地执行 P操作 V操作   消息队列：消息的链表，提供了一个进程向另一个进程发送数据块的方法，每个数据块可被认为是有一个类型，接收者接受的数据块可以有不同的类型。  生命周期随内核存在，需要显式调用或删除 可以双向通信，且克服了管道只能承载无格式字节流的缺点   共享内存：同一物理内存被映射到两个进程的地址空间，两个进程都可以访问这段空间，从而实现进程间通信  最快的IPC形式，内存映射到两个进程的地址空间，进程数据传递不再涉及内核 共享内存的生命周期随进程存在，需要显式地删除 没有互斥与同步机制   socket：套接字，应用层与传输层之间的一个抽象，socket是一种”打开——读写——关闭“模式的实现，作为服务器和客户端之间维护的”文件“，可以向文件写入内容供对方读取或读取对方的内容，通信结束时关闭文件。  线程间通信方法  信号量 互斥锁 自旋锁 读写锁 条件变量  硬中断和软中断的区别  软中断是执行中断指令产生的，硬中断是由外设引发的 硬中断的中断号是由中断控制器提供的，软中断的中断号是由指令直接指出，无需使用中断控制器。 硬中断是可屏蔽的，软中断不可屏蔽。 硬中断处理程序要确保它能快速完成任务，这样程序执行时才不会等待较长时间，称为上半部。 软中断处理硬中断未完成的工作，是一种推后执行的机制，属于下半部。  死锁 死锁发生的四个必要条件   互斥条件：进程要求对所分配的资源进行排他性控制，在一段时间内某资源仅为一进程所占用
  请求和保持条件：当进程因请求资源而阻塞时，对已获得的资源保持不放
  无法剥夺条件：进程已获得的资源在未使用完之前，无法剥夺，只能在使用完后由自己释放</description>
    </item>
    
    <item>
      <title>八股文——Cpp相关</title>
      <link>https://eternityqjl.top/posts/%E5%85%AB%E8%82%A1%E6%96%87cpp%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 06 Jan 2022 15:13:16 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E5%85%AB%E8%82%A1%E6%96%87cpp%E7%9B%B8%E5%85%B3/</guid>
      <description>new/delete和malloc/free的区别  malloc/free是C/C++的库函数，需要stdlib.h；new/delete是C++的关键字； 都可用于申请动态内存和释放内存，new/delete在对象创建的时候自动执行构造函数，对象消亡前自动执行析构函数，底层实现其实也是malloc/free new无需指定内存块的大小，编译器会根据类型信息自行计算；malloc需要显式地支持所需内存的大小 new返回指定类型的指针，无需进行类型转换；malloc默认返回类型为void*，必须强行转换为实际类型的指针 new内存分配失败时会抛出bad_alloc异常；malloc失败时返回NULL  malloc的底层实现 Linux下：
 开辟空间小于128K时，通过brk()函数  将数据段.data的最高地址指针**_edata向高地址移动，即增加堆**的有效区域来申请内存空间 brk分配的内存需要等到高地址内存释放以后才能释放，这也是内存碎片产生的原因   开辟空间大于128K时，通过mmap()函数  利用mmap系统调用，在堆和栈之间文件映射区域申请一块虚拟内存 128K限制可由M_MMAP_THRESHOLD选项进行修改 mmap分配的内存可以单独释放   以上只涉及虚拟内存的分配，直到进程第一次访问其地址时，才会通过缺页中断机制分配到物理页中  指针和引用的异同点；如何相互转换  引用是别名，指针是地址 指针变量在符号表上对应的地址值为指针变量的地址；而引用在符号边上的地址值为引用对象的地址；指针可以改变指向的对象，而引用不行；二者都可以改变指向对象的值。 硬件通过地址访问内存位置，因此引用可以理解为一个常量指针，只能绑定到初始化它的对象上  struct、union的异同  struct中每个变量一次存储；union中，每个变量都是从偏移地址零开始存储，同一时刻只有一个成员存储于该地址 struct内存大小遵循结构对齐原则（详见Cpp内存对齐） union内存大小为其最大成员的整数倍  extern C的作用 主要是为了能正确实现C++代码调用C语言代码。
C++支持函数重载，即不同名字空间namespace的两个函数原型声明可以完全相同，或者两个函数同名但参数列表不同；g++编译器会对此进行name mangling，生成全局唯一的符号名称，使链接器可以准确识别。
C语言不支持函数重载，即不允许同名符号，所以不需要这些工作，因此在C++代码中加入extern C，是为了链接规范。
memcpy()函数注意的问题 函数原型声明void *memcpy(void *dest, void *src, unsigned int count); 
memcpy函数用于把资源内存（src所指向的内存区域）中连续的count个字节数据拷贝到目标内存（dest所指向的内存区域）
 数据长度count的单位是字节，1byte = 8bit 数据类型为char，则数据长度就等于元素的个数；其他数据类型则要注意数据长度的值 n * sizeof(type_name)的写法  memmove()函数与memcpy()函数的功能相同，区别是前者处理空间重叠问题，后者不处理。
memset()函数 函数原型声明void *memset(void *buffer,int c,int count);</description>
    </item>
    
  </channel>
</rss>
