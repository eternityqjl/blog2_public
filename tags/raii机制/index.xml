<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RAII机制 on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/tags/raii%E6%9C%BA%E5%88%B6/</link>
    <description>Recent content in RAII机制 on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Fri, 25 Feb 2022 19:17:30 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/tags/raii%E6%9C%BA%E5%88%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cpp中的RAII机制</title>
      <link>https://eternityqjl.top/posts/cpp%E4%B8%AD%E7%9A%84raii%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 25 Feb 2022 19:17:30 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/cpp%E4%B8%AD%E7%9A%84raii%E6%9C%BA%E5%88%B6/</guid>
      <description>什么是RAII RAII即Resource Acquisition Is Initialization（资源获取就是初始化），是C++语言的一种管理资源、避免泄漏的惯用法。利用的就是C++构造的对象最终会被销毁的原则。RAII的做法是使用一个对象，在其构造时获取对应的资源，在对象生命期内控制对资源的访问，使之始终保持有效，最后在对象析构的时候，释放构造时获取的资源。
为什么要使用RAII RAII是用来管理资源、避免资源泄露的方法。系统资源有：网络套接字、互斥锁、文件句柄和内存等，是有限的。使用系统资源时要遵守：
 申请资源 使用资源 释放资源  前两部不可或缺，使用完成要要进行释放，否则会造成资源泄漏。
如何使用RAII 当我们在一个函数内部使用局部变量，当退出了这个局部变量的作用域时，这个变量也就别销毁了；当这个变量是类对象时，这个时候，就会自动调用这个类的析构函数，而这一切都是自动发生的，不要程序员显示的去调用完成。这个也太好了，RAII就是这样去完成的。
由于系统资源不具有自动释放的功能，而C++中的类具有自动调用析构函数的功能。如果把资源用类进行封装，对资源的操作都封装在类的内部，在析构函数中进行释放资源。这样当定义的局部变量的生命结束时，它的析构函数就会自动的被调用，如此，就不用程序员显示的去调用释放资源的操作了。
使用RAII机制的代码举例：
#include &amp;lt;iostream&amp;gt; using namespace std; class ArrayOperation { public: ArrayOperation() { m_Array = new int [10]; } void InitArray() { for (int i = 0; i &amp;lt; 10; ++i) *(m_Array + i) = i; } void ShowArray() { for (int i = 0; i &amp;lt;10; ++i) cout&amp;lt;&amp;lt;m_Array[i]&amp;lt;&amp;lt;endl; } ~ArrayOperation() { cout&amp;lt;&amp;lt; &amp;#34;~ArrayOperation is called&amp;#34; &amp;lt;&amp;lt;endl; if (m_Array !</description>
    </item>
    
  </channel>
</rss>
