<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>红黑树 on Jialong&#39;s Blog</title>
    <link>https://eternityqjl.top/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
    <description>Recent content in 红黑树 on Jialong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-2021 By Jialong</copyright>
    <lastBuildDate>Thu, 23 Dec 2021 15:30:08 +0800</lastBuildDate><atom:link href="https://eternityqjl.top/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AVL树及与红黑树、B/B&#43;树的对比</title>
      <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95avl%E6%A0%91%E5%8F%8A%E4%B8%8E%E7%BA%A2%E9%BB%91%E6%A0%91_b%E6%A0%91%E7%9A%84%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Thu, 23 Dec 2021 15:30:08 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95avl%E6%A0%91%E5%8F%8A%E4%B8%8E%E7%BA%A2%E9%BB%91%E6%A0%91_b%E6%A0%91%E7%9A%84%E5%AF%B9%E6%AF%94/</guid>
      <description>红黑树和B/B+树详见这两篇博客。
AVL树 AVL树为平衡二叉树，是以其发明者的名字命名的。任一结点对应的两棵子树的最大高度差为1。查找、插入和删除在平均和最坏的情况下的时间复杂度都为$O(\log n)$。
增加和删除元素操作可能需要借由一次或多次树旋转，以实现树的重新平衡。
与红黑树相比，AVL树是严格的平衡二叉树。
局限性：由于维护这种高度平衡所付出的代价比从中获得的效率收益还大。故而实际的应用不多，更多的地方是用追求局部而不是非常严格整体平衡的红黑树。当然，如果应用场景中对插入删除不频繁，只是对查找要求较高，那么AVL还是较优于红黑树。
红黑树 一种二叉查找树，确保没有一条路径会比其他路径长出两倍。是一种弱平衡树。在插入和删除的操作中的旋转次数相对于AVL树来说较少。
B/B+树 B/B+树是为了磁盘或其他存储设备设计的平衡多路查找树，与红黑树相比，在相同结点的情况下，一颗B/B+树的高度远远小于红黑树。B树的操作效率主要取决于访问磁盘的次数，关键字数相同的情况下，B树高度越小，磁盘I/O所花的时间越少。
B+树是应文件系统所需而产生的一种B树的变形树，非叶子结点只保存索引，不保存实际的数据，数据都保存在叶子结点中。相当于是文件系统的查找。
另外B+树支持顺序查找而B树不支持，数据库中经常需要遍历一定范围内的数据，因此采用B+树比采用B树的效率更高。</description>
    </item>
    
    <item>
      <title>算法——红黑树</title>
      <link>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
      <pubDate>Sat, 27 Nov 2021 21:03:17 +0800</pubDate>
      
      <guid>https://eternityqjl.top/posts/%E7%AE%97%E6%B3%95%E7%BA%A2%E9%BB%91%E6%A0%91/</guid>
      <description>本节是为了介绍一种二分查找树，无论如何构造，它的运行时间都是对数级别的。在一棵含有N个结点的树中，树的高为$\lg N$。
2-3查找树 允许一个结点保存多个键。一颗2-3查找树由2-结点和3-结点组成。
 2-结点：含有一个键（及其对应键值）和两条链接 3-结点：含有两个键（及其对应键值）和三条链接  同样地，将指向一颗空树的链接称为空链接。
查找 与二叉查找树基本相同，只是可能多了中间结点，从上向下一次递归查找。
插入新键  向2-结点插入新键 向一棵只含有3-结点的树中插入新键 向一个父结点为2-结点的3-结点中插入新键 向一个父结点为3-结点的3-结点中插入新键  全局性质 任意空链接到根结点的路径长度都是相等的。
一棵含有N个结点的2-3树高度在$\lfloor \log_3N\rfloor$（树中全是3-结点）和$\lfloor \lg N\rfloor$（树中全是2-结点）之间。
红黑二叉查找树 用标准二叉查找树和一些额外的信息来表示2-3树。将树中的链接分为两种类型：
 红链接：将两个2-结点连接起来构成一个3-结点 黑链接：2-3树中的普通链接  相当于将3-结点表示为一条左斜的红色链接。这种方法的优点是我们无需修改就可以直接使用标准二叉查找树的get()方法。对于任意的2-3树，只需对结点进行转换，就可以立即派生出一棵对应的二叉查找树。
一种等价的定义：
红黑树的另一种定义是含有红黑链接并满足下列条件的二叉查找树：
 红链接均为左链接 没有任何一个结点同时和两条红链接相连 该树是完美黑色平衡的，即任意空链接到根结点路径上的黑链接数量相同  插入操作的方法：
左旋转、右旋转、颜色转换
红黑树的实现 红黑树的插入算法：
private static final boolean RED = true; private static final boolean BLACK = false; private class Node { Key key; Value val; Node left, right; int N; boolean color; Node(Key key, Value val, int N, boolean color) { this.</description>
    </item>
    
  </channel>
</rss>
